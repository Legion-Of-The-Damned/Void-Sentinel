import discord
import logging
import asyncio
from discord.ext import commands
from discord import Intents
from config import load_config
from logging_setup import setup_logging
import data  # –ª–µ–Ω–∏–≤—ã–π –∫—ç—à
import traceback

logger = logging.getLogger("main")


def create_bot() -> commands.Bot:
    """–°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –∏–Ω—Ç–µ–Ω—Ç–∞–º–∏."""
    intents = Intents.default()
    intents.members = True
    intents.message_content = True
    return commands.Bot(command_prefix='/', intents=intents)

async def load_cogs(bot: commands.Bot):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–≥–æ–≤, –≤–∫–ª—é—á–∞—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å."""
    cogs = [
        "cogs.events",
        "cogs.general",
        "cogs.duel",
        "cogs.quiz",
        "cogs.music",
        "cogs.voting",
        "cogs.coinflip",
        "cogs.role_reactions",
        "cogs.applications",
        "cogs.verification",
        "cogs.clan_info",
        "cogs.info",
        "cogs.rps_cog",
        "cogs.admin",
        "cogs.clan_general",
    ]

    errors = []
    for cog in cogs:
        if cog in bot.extensions:
            logger.debug(f"üîÅ –ö–æ–≥ {cog} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
        try:
            await bot.load_extension(cog)
        except Exception:
            errors.append((cog, traceback.format_exc()))

    if errors:
        failed_cogs = ", ".join([c for c, _ in errors])
        logger.critical(f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π: {failed_cogs}")
        for cog, error in errors:
            logger.error(f"\n--- –û—à–∏–±–∫–∞ –≤ `{cog}` ---\n{error}\n--- –ö–æ–Ω–µ—Ü –æ—à–∏–±–∫–∏ ---")
    else:
        logger.success("üéâ –í—Å–µ —Ñ–∞–π–ª—ã cogs —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
    config = load_config()
    setup_logging(config)

    token = config.get("DISCORD_TOKEN")
    if not token:
        raise ValueError("‚ùå Discord —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

    bot = create_bot()

    @bot.event
    async def on_ready():
        logger.success(f"ü§ñ –ë–æ—Ç `{bot.user}` —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (ID: {bot.user.id})")
        for guild in bot.guilds:
            logger.info(f"üõ° –°–µ—Ä–≤–µ—Ä: {guild.name} | ID: {guild.id} | –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {guild.member_count}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–≥–∏ (–≤–∫–ª—é—á–∞—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π)
    await load_cogs(bot)

    try:
        await bot.start(token)
    except discord.LoginFailure:
        logger.critical("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Discord —Ç–æ–∫–µ–Ω.")
    except Exception as e:
        logger.critical(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.warning("üõë –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
