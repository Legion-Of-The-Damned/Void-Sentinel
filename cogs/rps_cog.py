import random
import asyncio
import logging
import uuid
from typing import List

import discord
from discord.ext import commands
from discord.ui import View, Button

logger = logging.getLogger("RPS")
duel_lock = asyncio.Lock()

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
MAX_PLAYERS = 5
CHOICES = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
BEATS = {"–∫–∞–º–µ–Ω—å": "–Ω–æ–∂–Ω–∏—Ü—ã", "–Ω–æ–∂–Ω–∏—Ü—ã": "–±—É–º–∞–≥–∞", "–±—É–º–∞–≥–∞": "–∫–∞–º–µ–Ω—å"}
EMOJI_MAP = {"–∫–∞–º–µ–Ω—å": "ü™®", "–Ω–æ–∂–Ω–∏—Ü—ã": "‚úÇÔ∏è", "–±—É–º–∞–≥–∞": "üìÑ"}

# === –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥—É—ç–ª–∏ RPS (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É) ===
rps_duels = {}


# === –ö–æ–≥ —Å –∫–æ–º–∞–Ω–¥–æ–π ===
class RPSCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.hybrid_command(
        name="–∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞",
        description="–í—ã–∑–≤–∞—Ç—å –¥–æ 4 –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
    )
    async def rps(
        self,
        ctx: commands.Context,
        user1: discord.Member,
        user2: discord.Member = None,
        user3: discord.Member = None,
        user4: discord.Member = None
    ):
        challenger = ctx.author
        participants = [challenger, user1] + [u for u in (user2, user3, user4) if u]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        if len(participants) > MAX_PLAYERS:
            await ctx.send(f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_PLAYERS} –∏–≥—Ä–æ–∫–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–µ–±—è).")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏
        if len(set(p.id for p in participants)) != len(participants):
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑—ã–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏–ª–∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return

        duel_id = f"rps-multi-{uuid.uuid4()}"
        async with duel_lock:
            rps_duels[duel_id] = {
                "type": "rps",
                "participants_ids": [p.id for p in participants],
                "channel_id": ctx.channel.id
            }

        mentions = ", ".join(p.mention for p in participants[1:])
        embed = discord.Embed(
            title="üéÆ –í—ã–∑–æ–≤ –Ω–∞ –ö–ù–ë!",
            description=f"{challenger.mention} –≤—ã–∑—ã–≤–∞–µ—Ç {mentions} –Ω–∞ **–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞**!\n"
                        "–ö–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            color=discord.Color.green()
        )
        view = MultiRPSAcceptView(challenger, participants, duel_id, self.bot)
        await ctx.send(embed=embed, view=view)

        # –ê–≤—Ç–æ-–ø—Ä–∏–Ω—è—Ç–∏–µ –±–æ—Ç–æ–≤
        for p in participants[1:]:
            if p.bot:
                view.accepted.add(p.id)
                logger.debug(f"{p.display_name} (–±–æ—Ç) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è–ª –¥—É—ç–ª—å {duel_id}")

        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∏–Ω—è–ª–∏ —Å—Ä–∞–∑—É
        needed = {p.id for p in participants[1:]}
        if needed <= view.accepted:
            await view.start_game(ctx.channel)


# === –í—å—é—Ö–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è ===
class MultiRPSAcceptView(View):
    def __init__(self, challenger, participants, duel_id, bot):
        super().__init__(timeout=60)
        self.challenger = challenger
        self.participants = participants
        self.duel_id = duel_id
        self.bot = bot
        self.accepted = set()
        self.declined = set()

        self.add_item(AcceptButton(self))
        self.add_item(DeclineButton(self))

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id not in [p.id for p in self.participants[1:]]:
            await interaction.response.send_message("–¢—ã –Ω–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω –Ω–∞ —ç—Ç—É –¥—É—ç–ª—å.", ephemeral=True)
            logger.warning(f"{interaction.user.display_name} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–∏–Ω—è—Ç—å –Ω–µ —Å–≤–æ—é –¥—É—ç–ª—å")
            return False
        return True

    async def on_timeout(self):
        async with duel_lock:
            rps_duels.pop(self.duel_id, None)
        self.clear_items()
        logger.info(f"–î—É—ç–ª—å {self.duel_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")

    async def handle_response(self, interaction: discord.Interaction, accept: bool):
        user_id = interaction.user.id
        if accept:
            if user_id in self.accepted:
                await interaction.response.send_message("–¢—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤.", ephemeral=True)
                return
            self.accepted.add(user_id)
            await interaction.response.send_message("‚úÖ –¢—ã –ø—Ä–∏–Ω—è–ª –¥—É—ç–ª—å!", ephemeral=True)
            logger.info(f"{interaction.user.display_name} –ø—Ä–∏–Ω—è–ª –¥—É—ç–ª—å {self.duel_id}")
        else:
            self.declined.add(user_id)
            async with duel_lock:
                rps_duels.pop(self.duel_id, None)
            self.clear_items()
            await interaction.response.send_message("‚ùå –¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –¥—É—ç–ª—å. –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", ephemeral=False)
            logger.warning(f"{interaction.user.display_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –¥—É—ç–ª—å {self.duel_id}")
            return

        await self.update_message(interaction)
        needed = {p.id for p in self.participants[1:]}
        if needed <= self.accepted:
            channel = self.bot.get_channel(rps_duels[self.duel_id]["channel_id"])
            await self.start_game(channel)

    async def update_message(self, interaction=None):
        accepted_mentions = ", ".join(f"<@{uid}>" for uid in self.accepted) or "–Ω–∏–∫—Ç–æ"
        declined_mentions = ", ".join(f"<@{uid}>" for uid in self.declined) or "–Ω–∏–∫—Ç–æ"
        waiting_mentions = ", ".join(
            p.mention for p in self.participants[1:] if p.id not in self.accepted and p.id not in self.declined
        ) or "–Ω–∏–∫–æ–≥–æ"

        description = (f"–û–∂–∏–¥–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç—ã –æ—Ç: {waiting_mentions}\n\n"
                       f"‚úÖ –ü—Ä–∏–Ω—è–ª–∏: {accepted_mentions}\n"
                       f"‚ùå –û—Ç–∫–ª–æ–Ω–∏–ª–∏: {declined_mentions}")
        embed = discord.Embed(title="üéÆ –í—ã–∑–æ–≤ –Ω–∞ –ö–ù–ë!", description=description, color=discord.Color.green())

        if interaction:
            await interaction.message.edit(embed=embed, view=self)

    async def start_game(self, channel):
        self.clear_items()
        await self.update_message()
        game_view = MultiRPSGameView(self.participants, self.duel_id, self.bot)
        msg = await channel.send("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö–æ–¥:", view=game_view)
        game_view.message = msg
        logger.info(f"–î—É—ç–ª—å {self.duel_id} –Ω–∞—á–∞—Ç–∞")


# === –ö–Ω–æ–ø–∫–∏ ===
class AcceptButton(Button):
    def __init__(self, parent_view: MultiRPSAcceptView):
        super().__init__(label="–ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å", style=discord.ButtonStyle.success, emoji="‚úîÔ∏è")
        self.parent_view = parent_view

    async def callback(self, interaction: discord.Interaction):
        await self.parent_view.handle_response(interaction, accept=True)


class DeclineButton(Button):
    def __init__(self, parent_view: MultiRPSAcceptView):
        super().__init__(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥—É—ç–ª—å", style=discord.ButtonStyle.danger, emoji="‚úñÔ∏è")
        self.parent_view = parent_view

    async def callback(self, interaction: discord.Interaction):
        await self.parent_view.handle_response(interaction, accept=False)


# === –í—å—é—Ö–∞ –¥–ª—è –∏–≥—Ä—ã ===
class MultiRPSGameView(View):
    def __init__(self, participants: List[discord.Member], duel_id: str, bot: commands.Bot):
        super().__init__(timeout=60)
        self.participants = participants
        self.duel_id = duel_id
        self.bot = bot
        self.choices = {}
        self.message = None

        for choice in CHOICES:
            self.add_item(MultiRPSButton(choice, EMOJI_MAP[choice]))

        for p in participants:
            if p.bot:
                self.choices[p.id] = random.choice(CHOICES)
                logger.debug(f"–ë–æ—Ç {p.display_name} –≤—ã–±—Ä–∞–ª {self.choices[p.id]}")

    async def interaction_check(self, interaction: discord.Interaction):
        if interaction.user.id not in [p.id for p in self.participants]:
            await interaction.response.send_message("–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏.", ephemeral=True)
            logger.warning(f"{interaction.user.display_name} –ø—ã—Ç–∞–ª—Å—è —Å—ã–≥—Ä–∞—Ç—å –Ω–µ —Å–≤–æ—é –¥—É—ç–ª—å")
            return False
        return True

    async def check_finish(self, channel):
        if len(self.choices) < len(self.participants):
            return

        scores = {p.id: sum(BEATS[self.choices[p.id]] == self.choices[p2.id] for p2 in self.participants if p.id != p2.id)
                  for p in self.participants}
        max_score = max(scores.values())
        winners = [p for p in self.participants if scores[p.id] == max_score]

        embed = discord.Embed(title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ö–ù–ë", color=discord.Color.blurple())
        for p in self.participants:
            embed.add_field(name=p.display_name, value=self.choices[p.id].capitalize(), inline=True)

        if len(winners) > 1:
            embed.description = f"–ù–∏—á—å—è –º–µ–∂–¥—É: {', '.join(w.display_name for w in winners)}"
            logger.info(f"–î—É—ç–ª—å {self.duel_id} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –Ω–∏—á—å–µ–π")
        else:
            winner = winners[0]
            embed.description = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.mention}"
            logger.info(f"–î—É—ç–ª—å {self.duel_id} –≤—ã–∏–≥—Ä–∞–ª {winner.display_name}")

        await channel.send(embed=embed)

        async with duel_lock:
            rps_duels.pop(self.duel_id, None)

        self.clear_items()
        if self.message:
            await self.message.edit(view=None)


# === –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞ ===
class MultiRPSButton(Button):
    def __init__(self, choice: str, emoji: str):
        super().__init__(label=choice.capitalize(), style=discord.ButtonStyle.primary, emoji=emoji)
        self.choice = choice

    async def callback(self, interaction: discord.Interaction):
        view: MultiRPSGameView = self.view
        user_id = interaction.user.id

        if user_id in view.choices:
            await interaction.response.send_message("–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –≤—ã–±–æ—Ä.", ephemeral=True)
            logger.warning(f"{interaction.user.display_name} –ø—ã—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞—Ç—å —Ö–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ")
            return

        view.choices[user_id] = self.choice
        await interaction.response.send_message(f"–¢—ã –≤—ã–±—Ä–∞–ª: **{self.choice}**", ephemeral=True)
        logger.info(f"{interaction.user.display_name} –≤—ã–±—Ä–∞–ª {self.choice} –≤ –¥—É—ç–ª–∏ {view.duel_id}")

        channel_id = rps_duels[view.duel_id]["channel_id"]
        channel = view.bot.get_channel(channel_id)
        await view.check_finish(channel)


# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É ===
async def setup(bot: commands.Bot):
    await bot.add_cog(RPSCog(bot))
