import random
import discord
from discord.ext import commands
from discord.ui import View, Button
from data import active_duels, save_active_duels, update_stats

MAX_PLAYERS = 5  # –≤–º–µ—Å—Ç–µ —Å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º

class RPSCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.hybrid_command(
        name="–∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞",
        description="–í—ã–∑–≤–∞—Ç—å –¥–æ 4 –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
    )
    async def rps(
        self, ctx: commands.Context,
        user1: discord.Member,
        user2: discord.Member = None,
        user3: discord.Member = None,
        user4: discord.Member = None
    ):
        challenger = ctx.author
        participants = [challenger, user1]

        for user in (user2, user3, user4):
            if user and user not in participants:
                participants.append(user)

        if len(participants) > MAX_PLAYERS:
            await ctx.send(f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_PLAYERS} –∏–≥—Ä–æ–∫–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–µ–±—è).")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏ –∏–ª–∏ –≤—ã–∑–æ–≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if len(set(p.id for p in participants)) != len(participants):
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑—ã–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏–ª–∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return

        duel_id = f"rps-multi-" + "-".join(str(p.id) for p in participants)

        if duel_id in active_duels:
            await ctx.send("‚öîÔ∏è –î—É—ç–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!")
            return

        active_duels[duel_id] = {
            "participants_ids": [p.id for p in participants],
            "channel_id": ctx.channel.id,
            "accepted": [],
            "declined": []
        }
        await save_active_duels()

        mentions = ", ".join(p.mention for p in participants[1:])  # –∫—Ä–æ–º–µ –≤—ã–∑–≤–∞–≤—à–µ–≥–æ

        embed = discord.Embed(
            title="üéÆ –í—ã–∑–æ–≤ –Ω–∞ –ö–ù–ë!",
            description=(
                f"{challenger.mention} –≤—ã–∑—ã–≤–∞–µ—Ç {mentions} –Ω–∞ **–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞**!\n"
                "–ö–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            ),
            color=discord.Color.green()
        )

        view = MultiRPSAcceptView(challenger, participants, duel_id, self.bot)
        message = await ctx.send(embed=embed, view=view)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–° –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞–º (–∫—Ä–æ–º–µ –±–æ—Ç–æ–≤ –∏ –≤—ã–∑–≤–∞–≤—à–µ–≥–æ)
        for p in participants[1:]:
            if not p.bot:
                try:
                    dm_embed = discord.Embed(
                        title="üì¨ –¢–µ–±—è –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –ö–ù–ë!",
                        description=(
                            f"–ò–≥—Ä–æ–∫ **{challenger.display_name}** –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–±—è –Ω–∞ –∏–≥—Ä—É!\n"
                            f"–ú–µ—Å—Ç–æ –¥—É—ç–ª–∏: {ctx.channel.mention}\n"
                            f"–ü—Ä–∏–º–∏ –≤—ã–∑–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ!"
                        ),
                        color=discord.Color.orange()
                    )
                    await p.send(embed=dm_embed)
                except discord.Forbidden:
                    await ctx.send(f"‚ö†Ô∏è {p.mention}, —è –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –õ–°.", ephemeral=True)

        # –ê–≤—Ç–æ-–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞ –±–æ—Ç–æ–≤
        for p in participants[1:]:
            if p.bot:
                view.accepted.add(p.id)

        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∏–Ω—è–ª–∏ ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º –∏–≥—Ä—É
        if set(p.id for p in participants[1:]) <= view.accepted:
            await view.start_game(ctx.channel)


class MultiRPSAcceptView(View):
    def __init__(self, challenger, participants, duel_id, bot):
        super().__init__(timeout=60)
        self.challenger = challenger
        self.participants = participants
        self.duel_id = duel_id
        self.bot = bot

        self.accepted = set()
        self.declined = set()

        self.add_item(self.AcceptButton(self))
        self.add_item(self.DeclineButton(self))

    async def update_message(self, interaction=None):
        accepted_mentions = ", ".join(f"<@{uid}>" for uid in self.accepted)
        declined_mentions = ", ".join(f"<@{uid}>" for uid in self.declined)
        waiting_mentions = ", ".join(
            p.mention for p in self.participants[1:]
            if p.id not in self.accepted and p.id not in self.declined
        )
        description = (
            f"–û–∂–∏–¥–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç—ã –æ—Ç: {waiting_mentions if waiting_mentions else '–Ω–∏–∫–æ–≥–æ'}\n\n"
            f"‚úÖ –ü—Ä–∏–Ω—è–ª–∏: {accepted_mentions if accepted_mentions else '–Ω–∏–∫—Ç–æ'}\n"
            f"‚ùå –û—Ç–∫–ª–æ–Ω–∏–ª–∏: {declined_mentions if declined_mentions else '–Ω–∏–∫—Ç–æ'}"
        )
        embed = discord.Embed(
            title="üéÆ –í—ã–∑–æ–≤ –Ω–∞ –ö–ù–ë!",
            description=description,
            color=discord.Color.green()
        )
        if interaction:
            await interaction.message.edit(embed=embed, view=self)
        else:
            channel = self.bot.get_channel(active_duels[self.duel_id]["channel_id"])
            messages = [m async for m in channel.history(limit=10)]
            for m in messages:
                if m.author == self.bot.user and m.embeds:
                    if m.embeds[0].title == "üéÆ –í—ã–∑–æ–≤ –Ω–∞ –ö–ù–ë!":
                        await m.edit(embed=embed, view=self)
                        break

    async def start_game(self, channel):
        self.clear_items()
        await self.update_message()

        game_view = MultiRPSGameView(self.participants, self.duel_id, self.bot)
        msg = await channel.send(
            f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö–æ–¥:",
            view=game_view
        )
        game_view.message = msg

    class AcceptButton(Button):
        def __init__(self, parent):
            super().__init__(label="–ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å", style=discord.ButtonStyle.success, emoji="‚úîÔ∏è")
            self.parent = parent

        async def callback(self, interaction: discord.Interaction):
            user_id = interaction.user.id
            if user_id not in [p.id for p in self.parent.participants[1:]]:
                await interaction.response.send_message("–¢—ã –Ω–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω –Ω–∞ —ç—Ç—É –¥—É—ç–ª—å.", ephemeral=True)
                return
            if user_id in self.parent.accepted:
                await interaction.response.send_message("–¢—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤.", ephemeral=True)
                return
            if user_id in self.parent.declined:
                await interaction.response.send_message("–¢—ã —É–∂–µ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤.", ephemeral=True)
                return

            self.parent.accepted.add(user_id)
            await interaction.response.send_message("‚úÖ –¢—ã –ø—Ä–∏–Ω—è–ª –¥—É—ç–ª—å!", ephemeral=True)
            await self.parent.update_message(interaction)

            needed = set(p.id for p in self.parent.participants[1:])
            if needed <= self.parent.accepted:
                channel = self.parent.bot.get_channel(active_duels[self.parent.duel_id]["channel_id"])
                await self.parent.start_game(channel)

    class DeclineButton(Button):
        def __init__(self, parent):
            super().__init__(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥—É—ç–ª—å", style=discord.ButtonStyle.danger, emoji="‚úñÔ∏è")
            self.parent = parent

        async def callback(self, interaction: discord.Interaction):
            user_id = interaction.user.id
            if user_id not in [p.id for p in self.parent.participants[1:]]:
                await interaction.response.send_message("–¢—ã –Ω–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω –Ω–∞ —ç—Ç—É –¥—É—ç–ª—å.", ephemeral=True)
                return
            if user_id in self.parent.declined:
                await interaction.response.send_message("–¢—ã —É–∂–µ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤.", ephemeral=True)
                return
            if user_id in self.parent.accepted:
                await interaction.response.send_message("–¢—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤.", ephemeral=True)
                return

            self.parent.declined.add(user_id)
            active_duels.pop(self.parent.duel_id, None)
            await save_active_duels()

            await interaction.response.send_message("‚ùå –¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –¥—É—ç–ª—å. –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", ephemeral=False)
            self.parent.clear_items()
            await self.parent.update_message(interaction)


class MultiRPSGameView(View):
    def __init__(self, participants, duel_id, bot):
        super().__init__(timeout=60)
        self.participants = participants
        self.duel_id = duel_id
        self.bot = bot
        self.choices = {}
        self.message = None

        self.add_item(MultiRPSButton("–∫–∞–º–µ–Ω—å"))
        self.add_item(MultiRPSButton("–Ω–æ–∂–Ω–∏—Ü—ã"))
        self.add_item(MultiRPSButton("–±—É–º–∞–≥–∞"))

        for p in participants:
            if p.bot:
                self.choices[p.id] = random.choice(["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id not in [p.id for p in self.participants]:
            await interaction.response.send_message("–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏.", ephemeral=True)
            return False
        return True

    async def check_finish(self, channel):
        if len(self.choices) < len(self.participants):
            return

        scores = {p.id: 0 for p in self.participants}
        beats = {
            "–∫–∞–º–µ–Ω—å": "–Ω–æ–∂–Ω–∏—Ü—ã",
            "–Ω–æ–∂–Ω–∏—Ü—ã": "–±—É–º–∞–≥–∞",
            "–±—É–º–∞–≥–∞": "–∫–∞–º–µ–Ω—å"
        }

        for p1 in self.participants:
            for p2 in self.participants:
                if p1.id == p2.id:
                    continue
                c1 = self.choices[p1.id]
                c2 = self.choices[p2.id]
                if beats[c1] == c2:
                    scores[p1.id] += 1

        max_score = max(scores.values())
        winners = [p for p in self.participants if scores[p.id] == max_score]

        embed = discord.Embed(title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ö–ù–ë", color=discord.Color.blurple())
        for p in self.participants:
            embed.add_field(name=p.display_name, value=self.choices[p.id].capitalize(), inline=True)

        if len(winners) > 1:
            embed.description = f"–ù–∏—á—å—è –º–µ–∂–¥—É: {', '.join(w.display_name for w in winners)}"
        else:
            winner = winners[0]
            embed.description = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.mention}"
            for loser in self.participants:
                if loser.id != winner.id:
                    update_stats(winner.id, loser.id)

        await channel.send(embed=embed)
        active_duels.pop(self.duel_id, None)
        await save_active_duels()

        self.clear_items()
        if self.message:
            try:
                await self.message.edit(view=None)
            except Exception:
                pass


class MultiRPSButton(Button):
    def __init__(self, choice: str):
        emoji_map = {"–∫–∞–º–µ–Ω—å": "ü™®", "–Ω–æ–∂–Ω–∏—Ü—ã": "‚úÇÔ∏è", "–±—É–º–∞–≥–∞": "üìÑ"}
        super().__init__(label=choice.capitalize(), style=discord.ButtonStyle.primary, emoji=emoji_map[choice])
        self.choice = choice

    async def callback(self, interaction: discord.Interaction):
        view: MultiRPSGameView = self.view
        user_id = interaction.user.id

        if user_id in view.choices:
            await interaction.response.send_message("–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –≤—ã–±–æ—Ä.", ephemeral=True)
            return

        view.choices[user_id] = self.choice
        await interaction.response.send_message(f"–¢—ã –≤—ã–±—Ä–∞–ª: **{self.choice}**", ephemeral=True)

        channel_id = active_duels[view.duel_id]["channel_id"]
        channel = view.bot.get_channel(channel_id)
        await view.check_finish(channel)


async def setup(bot: commands.Bot):
    await bot.add_cog(RPSCog(bot))
import random
import discord
from discord.ext import commands
from discord.ui import View, Button
from data import active_duels, save_active_duels, update_stats
import logging

MAX_PLAYERS = 5  # –≤–º–µ—Å—Ç–µ —Å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º
logger = logging.getLogger("RPSCog")


class RPSCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.hybrid_command(
        name="–∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞",
        description="–í—ã–∑–≤–∞—Ç—å –¥–æ 4 –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
    )
    async def rps(
        self, ctx: commands.Context,
        user1: discord.Member,
        user2: discord.Member = None,
        user3: discord.Member = None,
        user4: discord.Member = None
    ):
        challenger = ctx.author
        participants = [challenger, user1]

        for user in (user2, user3, user4):
            if user and user not in participants:
                participants.append(user)

        if len(participants) > MAX_PLAYERS:
            await ctx.send(f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_PLAYERS} –∏–≥—Ä–æ–∫–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–µ–±—è).")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏ –∏–ª–∏ –≤—ã–∑–æ–≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if len(set(p.id for p in participants)) != len(participants):
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑—ã–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏–ª–∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return

        duel_id = f"rps-multi-" + "-".join(str(p.id) for p in participants)

        if duel_id in active_duels:
            await ctx.send("‚öîÔ∏è –î—É—ç–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!")
            return

        active_duels[duel_id] = {
            "participants_ids": [p.id for p in participants],
            "channel_id": ctx.channel.id,
            "accepted": [],
            "declined": []
        }
        await save_active_duels()
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –¥—É—ç–ª—å {duel_id} –≤ –∫–∞–Ω–∞–ª–µ {ctx.channel.name}")

        mentions = ", ".join(p.mention for p in participants[1:])  # –∫—Ä–æ–º–µ –≤—ã–∑–≤–∞–≤—à–µ–≥–æ
        embed = discord.Embed(
            title="üéÆ –í—ã–∑–æ–≤ –Ω–∞ –ö–ù–ë!",
            description=(f"{challenger.mention} –≤—ã–∑—ã–≤–∞–µ—Ç {mentions} –Ω–∞ **–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞**!\n"
                         "–ö–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."),
            color=discord.Color.green()
        )

        view = MultiRPSAcceptView(challenger, participants, duel_id, self.bot)
        message = await ctx.send(embed=embed, view=view)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–° –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞–º (–∫—Ä–æ–º–µ –±–æ—Ç–æ–≤ –∏ –≤—ã–∑–≤–∞–≤—à–µ–≥–æ)
        for p in participants[1:]:
            if not p.bot:
                try:
                    dm_embed = discord.Embed(
                        title="üì¨ –¢–µ–±—è –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –ö–ù–ë!",
                        description=(f"–ò–≥—Ä–æ–∫ **{challenger.display_name}** –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–±—è –Ω–∞ –∏–≥—Ä—É!\n"
                                     f"–ú–µ—Å—Ç–æ –¥—É—ç–ª–∏: {ctx.channel.mention}\n"
                                     f"–ü—Ä–∏–º–∏ –≤—ã–∑–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ!"),
                        color=discord.Color.orange()
                    )
                    await p.send(embed=dm_embed)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –õ–° {p.display_name} –æ –¥—É—ç–ª–∏ {duel_id}")
                except discord.Forbidden:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° {p.display_name} –æ –¥—É—ç–ª–∏ {duel_id}")

        # –ê–≤—Ç–æ-–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞ –±–æ—Ç–æ–≤
        for p in participants[1:]:
            if p.bot:
                view.accepted.add(p.id)
                logger.info(f"{p.display_name} (–±–æ—Ç) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è–ª –¥—É—ç–ª—å {duel_id}")

        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∏–Ω—è–ª–∏ ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º –∏–≥—Ä—É
        if set(p.id for p in participants[1:]) <= view.accepted:
            await view.start_game(ctx.channel)


class MultiRPSAcceptView(View):
    def __init__(self, challenger, participants, duel_id, bot):
        super().__init__(timeout=60)
        self.challenger = challenger
        self.participants = participants
        self.duel_id = duel_id
        self.bot = bot

        self.accepted = set()
        self.declined = set()

        self.add_item(self.AcceptButton(self))
        self.add_item(self.DeclineButton(self))

    async def update_message(self, interaction=None):
        accepted_mentions = ", ".join(f"<@{uid}>" for uid in self.accepted)
        declined_mentions = ", ".join(f"<@{uid}>" for uid in self.declined)
        waiting_mentions = ", ".join(
            p.mention for p in self.participants[1:]
            if p.id not in self.accepted and p.id not in self.declined
        )
        description = (f"–û–∂–∏–¥–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç—ã –æ—Ç: {waiting_mentions if waiting_mentions else '–Ω–∏–∫–æ–≥–æ'}\n\n"
                       f"‚úÖ –ü—Ä–∏–Ω—è–ª–∏: {accepted_mentions if accepted_mentions else '–Ω–∏–∫—Ç–æ'}\n"
                       f"‚ùå –û—Ç–∫–ª–æ–Ω–∏–ª–∏: {declined_mentions if declined_mentions else '–Ω–∏–∫—Ç–æ'}")
        embed = discord.Embed(title="üéÆ –í—ã–∑–æ–≤ –Ω–∞ –ö–ù–ë!", description=description, color=discord.Color.green())
        if interaction:
            await interaction.message.edit(embed=embed, view=self)
        else:
            channel = self.bot.get_channel(active_duels[self.duel_id]["channel_id"])
            messages = [m async for m in channel.history(limit=10)]
            for m in messages:
                if m.author == self.bot.user and m.embeds:
                    if m.embeds[0].title == "üéÆ –í—ã–∑–æ–≤ –Ω–∞ –ö–ù–ë!":
                        await m.edit(embed=embed, view=self)
                        break

    async def start_game(self, channel):
        self.clear_items()
        await self.update_message()
        game_view = MultiRPSGameView(self.participants, self.duel_id, self.bot)
        msg = await channel.send(f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö–æ–¥:", view=game_view)
        game_view.message = msg
        logger.info(f"–î—É—ç–ª—å {self.duel_id} –Ω–∞—á–∞—Ç–∞")


    class AcceptButton(Button):
        def __init__(self, parent):
            super().__init__(label="–ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å", style=discord.ButtonStyle.success, emoji="‚úîÔ∏è")
            self.parent = parent

        async def callback(self, interaction: discord.Interaction):
            user_id = interaction.user.id
            if user_id not in [p.id for p in self.parent.participants[1:]]:
                await interaction.response.send_message("–¢—ã –Ω–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω –Ω–∞ —ç—Ç—É –¥—É—ç–ª—å.", ephemeral=True)
                return
            if user_id in self.parent.accepted:
                await interaction.response.send_message("–¢—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤.", ephemeral=True)
                return
            if user_id in self.parent.declined:
                await interaction.response.send_message("–¢—ã —É–∂–µ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤.", ephemeral=True)
                return

            self.parent.accepted.add(user_id)
            logger.info(f"{interaction.user.display_name} –ø—Ä–∏–Ω—è–ª –¥—É—ç–ª—å {self.parent.duel_id}")
            await interaction.response.send_message("‚úÖ –¢—ã –ø—Ä–∏–Ω—è–ª –¥—É—ç–ª—å!", ephemeral=True)
            await self.parent.update_message(interaction)

            needed = set(p.id for p in self.parent.participants[1:])
            if needed <= self.parent.accepted:
                channel = self.parent.bot.get_channel(active_duels[self.parent.duel_id]["channel_id"])
                await self.parent.start_game(channel)


    class DeclineButton(Button):
        def __init__(self, parent):
            super().__init__(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥—É—ç–ª—å", style=discord.ButtonStyle.danger, emoji="‚úñÔ∏è")
            self.parent = parent

        async def callback(self, interaction: discord.Interaction):
            user_id = interaction.user.id
            if user_id not in [p.id for p in self.parent.participants[1:]]:
                await interaction.response.send_message("–¢—ã –Ω–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω –Ω–∞ —ç—Ç—É –¥—É—ç–ª—å.", ephemeral=True)
                return
            if user_id in self.parent.declined:
                await interaction.response.send_message("–¢—ã —É–∂–µ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤.", ephemeral=True)
                return
            if user_id in self.parent.accepted:
                await interaction.response.send_message("–¢—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤.", ephemeral=True)
                return

            self.parent.declined.add(user_id)
            active_duels.pop(self.parent.duel_id, None)
            await save_active_duels()
            logger.info(f"{interaction.user.display_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –¥—É—ç–ª—å {self.parent.duel_id}")

            await interaction.response.send_message("‚ùå –¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –¥—É—ç–ª—å. –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", ephemeral=False)
            self.parent.clear_items()
            await self.parent.update_message(interaction)


class MultiRPSGameView(View):
    def __init__(self, participants, duel_id, bot):
        super().__init__(timeout=60)
        self.participants = participants
        self.duel_id = duel_id
        self.bot = bot
        self.choices = {}
        self.message = None

        self.add_item(MultiRPSButton("–∫–∞–º–µ–Ω—å"))
        self.add_item(MultiRPSButton("–Ω–æ–∂–Ω–∏—Ü—ã"))
        self.add_item(MultiRPSButton("–±—É–º–∞–≥–∞"))

        for p in participants:
            if p.bot:
                self.choices[p.id] = random.choice(["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])
                logger.info(f"–ë–æ—Ç {p.display_name} –≤—ã–±—Ä–∞–ª {self.choices[p.id]} –¥–ª—è –¥—É—ç–ª–∏ {duel_id}")

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id not in [p.id for p in self.participants]:
            await interaction.response.send_message("–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏.", ephemeral=True)
            return False
        return True

    async def check_finish(self, channel):
        if len(self.choices) < len(self.participants):
            return

        scores = {p.id: 0 for p in self.participants}
        beats = {"–∫–∞–º–µ–Ω—å": "–Ω–æ–∂–Ω–∏—Ü—ã", "–Ω–æ–∂–Ω–∏—Ü—ã": "–±—É–º–∞–≥–∞", "–±—É–º–∞–≥–∞": "–∫–∞–º–µ–Ω—å"}

        for p1 in self.participants:
            for p2 in self.participants:
                if p1.id == p2.id:
                    continue
                c1 = self.choices[p1.id]
                c2 = self.choices[p2.id]
                if beats[c1] == c2:
                    scores[p1.id] += 1

        max_score = max(scores.values())
        winners = [p for p in self.participants if scores[p.id] == max_score]

        embed = discord.Embed(title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ö–ù–ë", color=discord.Color.blurple())
        for p in self.participants:
            embed.add_field(name=p.display_name, value=self.choices[p.id].capitalize(), inline=True)

        if len(winners) > 1:
            embed.description = f"–ù–∏—á—å—è –º–µ–∂–¥—É: {', '.join(w.display_name for w in winners)}"
            logger.info(f"–î—É—ç–ª—å {self.duel_id} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –Ω–∏—á—å–µ–π –º–µ–∂–¥—É: {', '.join(w.display_name for w in winners)}")
        else:
            winner = winners[0]
            embed.description = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.mention}"
            for loser in self.participants:
                if loser.id != winner.id:
                    update_stats(winner.id, loser.id)
            logger.info(f"–î—É—ç–ª—å {self.duel_id} –≤—ã–∏–≥—Ä–∞–ª {winner.display_name}")

        await channel.send(embed=embed)
        active_duels.pop(self.duel_id, None)
        await save_active_duels()
        self.clear_items()
        if self.message:
            try:
                await self.message.edit(view=None)
            except Exception:
                pass


class MultiRPSButton(Button):
    def __init__(self, choice: str):
        emoji_map = {"–∫–∞–º–µ–Ω—å": "ü™®", "–Ω–æ–∂–Ω–∏—Ü—ã": "‚úÇÔ∏è", "–±—É–º–∞–≥–∞": "üìÑ"}
        super().__init__(label=choice.capitalize(), style=discord.ButtonStyle.primary, emoji=emoji_map[choice])
        self.choice = choice

    async def callback(self, interaction: discord.Interaction):
        view: MultiRPSGameView = self.view
        user_id = interaction.user.id

        if user_id in view.choices:
            await interaction.response.send_message("–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –≤—ã–±–æ—Ä.", ephemeral=True)
            return

        view.choices[user_id] = self.choice
        logger.info(f"{interaction.user.display_name} –≤—ã–±—Ä–∞–ª {self.choice} –¥–ª—è –¥—É—ç–ª–∏ {view.duel_id}")
        await interaction.response.send_message(f"–¢—ã –≤—ã–±—Ä–∞–ª: **{self.choice}**", ephemeral=True)

        channel_id = active_duels[view.duel_id]["channel_id"]
        channel = view.bot.get_channel(channel_id)
        await view.check_finish(channel)


async def setup(bot: commands.Bot):
    await bot.add_cog(RPSCog(bot))
