import discord
import logging
from discord import app_commands
from discord.ext import commands, tasks
import platform
import psutil
import asyncio
from datetime import datetime, timedelta
import json
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(message)s"
)
logger = logging.getLogger("discord")

BOT_VERSION = "3.1"  # –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
DATA_DIR = "data"
REMINDERS_FILE = os.path.join(DATA_DIR, "reminders.json")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ {user_id: [(time, message), ...]}
user_reminders = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ ---
def save_reminders():
    os.makedirs(DATA_DIR, exist_ok=True)
    with open(REMINDERS_FILE, "w", encoding="utf-8") as f:
        json.dump({
            str(user_id): [(dt.isoformat(), msg) for dt, msg in reminders]
            for user_id, reminders in user_reminders.items()
        }, f, ensure_ascii=False, indent=4)

def load_reminders():
    global user_reminders
    try:
        with open(REMINDERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            user_reminders = {
                int(user_id): [(datetime.fromisoformat(dt), msg) for dt, msg in reminders]
                for user_id, reminders in data.items()
            }
    except FileNotFoundError:
        user_reminders = {}

class GeneralCommands(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.synced = False
        load_reminders()  # –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self.check_reminders.start()  # –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

    # --- –°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ---
    @commands.Cog.listener()
    async def on_ready(self):
        if not self.synced:
            try:
                await self.bot.tree.sync()
                self.synced = True
                logger.info("‚úÖ Slash-–∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

        try:
            await self.bot.change_presence(activity=discord.Game(name="–ò–¥—É—Ç —Ç–µ—Ö-—Ä–∞–±–æ—Ç—ã"))
            logger.info("–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")

    # --- –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ ---
    @app_commands.command(name="–ø–æ–º–æ—â—å", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    async def help_command(self, interaction):
        embed = discord.Embed(
            title="‚öî Void Sentinel | –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º ‚öî",
            description=(
                ":fire: **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
                ":one: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–∏—á–∫–æ–≤\n"
                ":two: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Ö–æ–¥–µ\n"
                ":three: `/–ø–æ–º–æ—â—å` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n"
                ":four: `/—Å–æ—Å—Ç–∞–≤_–∫–ª–∞–Ω–∞` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                ":five: `/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è_–æ_—Å–µ—Ä–≤–µ—Ä–µ`\n"
                ":six: `/–ø–∏–Ω–≥` ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                ":seven: `/–∑–∞—è–≤–∫–∞`\n\n"
                "‚öî **–ë–æ–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                ":eight: `/–¥—É—ç–ª—å`\n"
                ":nine: `/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`\n"
                ":keycap_ten: `/–æ–±—â–∞—è_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`\n\n"
                ":game_die: **–ò–≥—Ä–æ–≤—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã:**\n"
                ":one::one: `/–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞`\n"
                ":one::two: `/–º–æ–Ω–µ—Ç–∫–∞`\n"
                ":one::three: `/–∫–∞–º–µ–Ω—å_–Ω–æ–∂–Ω–∏—Ü—ã_–±—É–º–∞–≥–∞`\n\n"
                ":memo: **–õ–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:**\n"
                ":one::four: `/–Ω–∞–ø–æ–º–Ω–∏ [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç]`\n\n"
                ":rotating_light: **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                ":one::five: `/–ø–æ–±–µ–¥–∞`\n"
                ":one::six: `/–∏–∑–≥–Ω–∞–Ω–∏–µ`\n"
                ":one::seven: `/–±–∞–Ω @—É—á–∞—Å—Ç–Ω–∏–∫`\n"
                ":one::eight: `/—Ä–∞–∑–±–∞–Ω [ID]`\n"
                ":one::nine: `/–∫–∏–∫ @—É—á–∞—Å—Ç–Ω–∏–∫`\n"
                ":two::zero: `/–º—É—Ç @—É—á–∞—Å—Ç–Ω–∏–∫ [–º–∏–Ω—É—Ç—ã]`\n"
                ":two::one: `/—Ä–∞–∑–º—É—Ç @—É—á–∞—Å—Ç–Ω–∏–∫`\n"
            ),
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed)
        logger.info(f"üìñ /–ø–æ–º–æ—â—å | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {interaction.user} | –°–µ—Ä–≤–µ—Ä: {interaction.guild.name if interaction.guild else '–õ–°'}")

    # --- –ö–æ–º–∞–Ω–¥–∞ –ø–∏–Ω–≥–∞ ---
    @app_commands.command(name="–ø–∏–Ω–≥", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞")
    async def ping(self, interaction):
        latency_ms = round(self.bot.latency * 1000)
        python_version = platform.python_version()
        process = psutil.Process()
        ram_usage_mb = process.memory_info().rss / 1024 / 1024
        cpu_usage_percent = psutil.cpu_percent(interval=0.5)

        embed = discord.Embed(
            title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞",
            color=discord.Color.red()
        )
        embed.add_field(name="–ó–∞–¥–µ—Ä–∂–∫–∞", value=f"{latency_ms} ms", inline=True)
        embed.add_field(name="Python", value=python_version, inline=True)
        embed.add_field(name="–í–µ—Ä—Å–∏—è –±–æ—Ç–∞", value=BOT_VERSION, inline=True)
        embed.add_field(name="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM", value=f"{ram_usage_mb:.2f} MB", inline=True)
        embed.add_field(name="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU", value=f"{cpu_usage_percent:.1f}%", inline=True)

        await interaction.response.send_message(embed=embed)

        logger.info(
            f"üì∂ /–ø–∏–Ω–≥ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {interaction.user} | "
            f"–°–µ—Ä–≤–µ—Ä: {interaction.guild.name if interaction.guild else '–õ–°'} | "
            f"Ping: {latency_ms} ms | RAM: {ram_usage_mb:.2f} MB | CPU: {cpu_usage_percent:.1f}% | "
            f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}"
        )

    # --- –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
    @app_commands.command(name="–Ω–∞–ø–æ–º–Ω–∏", description="–°–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    @app_commands.describe(minutes="–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å", message="–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    async def remind(self, interaction: discord.Interaction, minutes: int, message: str):
        remind_time = datetime.utcnow() + timedelta(minutes=minutes)
        user_id = interaction.user.id
        user_reminders.setdefault(user_id, []).append((remind_time, message))
        save_reminders()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        await interaction.response.send_message(
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç: {message}", ephemeral=True
        )
        logger.info(f"‚è∞ /–Ω–∞–ø–æ–º–Ω–∏ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {interaction.user} | –ß–µ—Ä–µ–∑: {minutes} –º–∏–Ω | –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")

    # --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
    @tasks.loop(seconds=30)
    async def check_reminders(self):
        now = datetime.utcnow()
        for user_id, reminders in list(user_reminders.items()):
            for remind_time, message in reminders:
                if now >= remind_time:
                    user = self.bot.get_user(user_id)
                    if user:
                        try:
                            await user.send(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    reminders.remove((remind_time, message))
                    save_reminders()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if not reminders:
                user_reminders.pop(user_id, None)
                save_reminders()

    @check_reminders.before_loop
    async def before_check_reminders(self):
        await self.bot.wait_until_ready()

# --- –§—É–Ω–∫—Ü–∏—è setup ---
async def setup(bot: commands.Bot):
    await bot.add_cog(GeneralCommands(bot))
