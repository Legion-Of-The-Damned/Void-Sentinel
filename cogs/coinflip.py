import discord
import logging
from discord.ext import commands
import random

# --- –ò—Å–ø–æ–ª—å–∑—É–µ–º root logger, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ setup_logging ---
logger = logging.getLogger()  # —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ —Ç–≤–æ–π –ª–æ–≥–≥–µ—Ä —Ñ–∞–π–ª

class CoinFlipButton(discord.ui.View):
    def __init__(self, challenger: discord.Member, opponent: discord.Member, bot, play_vs_bot=False, timeout=60):
        super().__init__(timeout=timeout)
        self.challenger = challenger
        self.opponent = opponent
        self.bot = bot
        self.choices = {}
        self.play_vs_bot = play_vs_bot
        self.result_msg = None
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞ –ú–æ–Ω–µ—Ç–∫–∞: {challenger} vs {opponent}")

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id not in [self.challenger.id, self.opponent.id]:
            await interaction.response.send_message("‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="–û—Ä—ë–ª", style=discord.ButtonStyle.primary, emoji="ü¶Ö")
    async def eagle(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.make_choice(interaction, "–æ—Ä—ë–ª")

    @discord.ui.button(label="–†–µ—à–∫–∞", style=discord.ButtonStyle.secondary, emoji="üí∞")
    async def tails(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.make_choice(interaction, "—Ä–µ—à–∫–∞")

    async def make_choice(self, interaction: discord.Interaction, choice: str):
        user_id = interaction.user.id

        if user_id in self.choices:
            await interaction.response.send_message("‚ùó –¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä.", ephemeral=True)
            logger.warning(f"{interaction.user} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞—Ç—å {choice} –ø–æ–≤—Ç–æ—Ä–Ω–æ")
            return

        self.choices[user_id] = choice
        await interaction.response.send_message(f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª: **{choice}**", ephemeral=True)
        logger.info(f"{interaction.user} –≤—ã–±—Ä–∞–ª {choice}")

        # –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞
        if self.play_vs_bot:
            if self.bot.user.id not in self.choices:
                self.choices[self.bot.user.id] = random.choice(["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"])
                logger.info(f"{self.bot.user} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–ª {self.choices[self.bot.user.id]}")
            await self.reveal_result()
        else:
            # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if len(self.choices) == 2:
                await self.reveal_result()
            else:
                await interaction.followup.send(f"–û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –æ—Ç {self.opponent.mention}...", ephemeral=True)

    async def reveal_result(self):
        result = random.choice(["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"])
        result_emoji = "ü¶Ö" if result == "–æ—Ä—ë–ª" else "üí∞"

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner = None
        for user_id, choice in self.choices.items():
            if choice == result:
                winner = user_id
                break

        description = f"ü™ô –ú–æ–Ω–µ—Ç–∞ –ø–æ–¥–±—Ä–æ—à–µ–Ω–∞... –í—ã–ø–∞–ª–æ: **{result.upper()}** {result_emoji}\n\n"
        if winner:
            if winner == self.challenger.id:
                description += f"üéâ –ü–æ–±–µ–∂–¥–∞–µ—Ç {self.challenger.mention}!"
                logger.success(f"{self.challenger} –ø–æ–±–µ–¥–∏–ª –≤ –∏–≥—Ä–µ –ú–æ–Ω–µ—Ç–∫–∞ ({result})")
            elif winner == self.opponent.id:
                description += f"üéâ –ü–æ–±–µ–∂–¥–∞–µ—Ç {self.opponent.mention}!"
                logger.success(f"{self.opponent} –ø–æ–±–µ–¥–∏–ª –≤ –∏–≥—Ä–µ –ú–æ–Ω–µ—Ç–∫–∞ ({result})")
            else:
                description += f"ü§ñ –ü–æ–±–µ–∂–¥–∞–µ—Ç {self.bot.user.mention}!"
                logger.success(f"{self.bot.user} –ø–æ–±–µ–¥–∏–ª –≤ –∏–≥—Ä–µ –ú–æ–Ω–µ—Ç–∫–∞ ({result})")
        else:
            description += "‚öñÔ∏è –ù–∏—á—å—è! –£ –æ–±–æ–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤—ã–±–æ—Ä."
            logger.info(f"–ù–∏—á—å—è –≤ –∏–≥—Ä–µ –ú–æ–Ω–µ—Ç–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç {result}")

        embed = discord.Embed(title="üé≤ –ú–æ–Ω–µ—Ç–∫–∞: –û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞", description=description, color=0xFFD700)
        for child in self.children:
            child.disabled = True
        try:
            await self.result_msg.edit(embed=embed, view=self)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞: {e}")

class CoinFlip(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.hybrid_command(name="–º–æ–Ω–µ—Ç–∫–∞", description="–í—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –±–æ—Ç–∞ –Ω–∞ –û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞!")
    async def coinflip(self, ctx: commands.Context, opponent: discord.Member = None):
        opponent = opponent or self.bot.user

        if opponent.id == ctx.author.id:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.")
            logger.warning(f"{ctx.author} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å—ã–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")
            return

        play_vs_bot = opponent.bot
        view = CoinFlipButton(ctx.author, opponent, self.bot, play_vs_bot=play_vs_bot)

        title = "ü™ô –ú–æ–Ω–µ—Ç–∫–∞: –û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞!"
        if play_vs_bot:
            description = (
                f"{ctx.author.mention} –±—Ä–æ—Å–∞–µ—Ç –≤—ã–∑–æ–≤ {self.bot.user.mention}!\n\n"
                f"–í—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, —á—å—è —Å—Ç–æ—Ä–æ–Ω–∞ –≤—ã–ø–∞–¥–µ—Ç!"
            )
        else:
            description = (
                f"{ctx.author.mention} –≤—ã–∑–≤–∞–ª {opponent.mention} –Ω–∞ –±—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã!\n\n"
                f"–û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω—É.\n"
                f"–ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, —á—å—è —Å—Ç–æ—Ä–æ–Ω–∞ –≤—ã–ø–∞–¥–µ—Ç!"
            )

        embed = discord.Embed(title=title, description=description, color=0x00BFFF)
        msg = await ctx.send(embed=embed, view=view)
        view.result_msg = msg
        logger.info(f"–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {ctx.author} vs {opponent}, —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id}")

async def setup(bot):
    await bot.add_cog(CoinFlip(bot))
