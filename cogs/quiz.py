import os
import discord
from discord import app_commands
from discord.ext import commands
from discord.ui import View, Select, Button
import random
import logging
import asyncio
from config import load_config
from supabase import create_client, Client

CONFIG = load_config()
logger = logging.getLogger("QuizCog")

# Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

async def fetch_questions_from_supabase():
    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ execute –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        response = await asyncio.to_thread(lambda: supabase.table("quiz_questions").select("*").execute())

        data = response.data  # —Ç—É—Ç —É–∂–µ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        if not data:
            logger.error("‚ùå –î–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –Ω–µ—Ç.")
            return []

        valid_questions = []
        for q in data:
            if all(k in q for k in ("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–≤–æ–ø—Ä–æ—Å", "–≤–∞—Ä–∏–∞–Ω—Ç_1", "–≤–∞—Ä–∏–∞–Ω—Ç_2", "–≤–∞—Ä–∏–∞–Ω—Ç_3", "–≤–∞—Ä–∏–∞–Ω—Ç_4", "–æ—Ç–≤–µ—Ç")):
                q_dict = {
                    "category": q["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                    "question": q["–≤–æ–ø—Ä–æ—Å"],
                    "options": [q["–≤–∞—Ä–∏–∞–Ω—Ç_1"], q["–≤–∞—Ä–∏–∞–Ω—Ç_2"], q["–≤–∞—Ä–∏–∞–Ω—Ç_3"], q["–≤–∞—Ä–∏–∞–Ω—Ç_4"]],
                    "answer": int(q["–æ—Ç–≤–µ—Ç"])
                }
                valid_questions.append(q_dict)

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(valid_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Supabase")
        return valid_questions

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase: {e}")
        return []

# --- QuizView, CategorySelect, CategoryView –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
class QuizView(View):
    def __init__(self, question_data):
        super().__init__(timeout=None)
        self.question = question_data
        self.answered_users = set()
        for idx, option in enumerate(self.question['options'], start=1):
            button = Button(label=str(idx), style=discord.ButtonStyle.primary)
            button.callback = self.make_callback(idx)
            self.add_item(button)

    def make_callback(self, idx):
        async def callback(interaction: discord.Interaction):
            if interaction.user.id in self.answered_users:
                await interaction.response.send_message("–í—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.", ephemeral=True)
                return
            self.answered_users.add(interaction.user.id)
            correct = self.question['answer']
            if idx == correct:
                await interaction.response.send_message("üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", ephemeral=True)
                await interaction.channel.send(f"‚úÖ {interaction.user.mention} –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
                logger.info(f"{interaction.user} –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {self.question['question']}")
            else:
                await interaction.response.send_message("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.", ephemeral=True)
                logger.info(f"{interaction.user} –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {self.question['question']}")
        return callback

class CategorySelect(Select):
    def __init__(self, categories, questions):
        options = [discord.SelectOption(label=cat.capitalize(), value=cat) for cat in categories]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", min_values=1, max_values=1, options=options)
        self.questions = questions

    async def callback(self, interaction: discord.Interaction):
        selected_category = self.values[0]
        filtered = [q for q in self.questions if q['category'].lower() == selected_category.lower()]
        if not filtered:
            await interaction.response.send_message(f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{selected_category}` –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.", ephemeral=True)
            logger.warning(f"{interaction.user} –≤—ã–±—Ä–∞–ª –ø—É—Å—Ç—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {selected_category}")
            return

        question = random.choice(filtered)
        options_text = "\n".join(f"{idx}. {opt}" for idx, opt in enumerate(question["options"], start=1))

        embed = discord.Embed(
            title="üß† –í–æ–ø—Ä–æ—Å –í–∏–∫—Ç–æ—Ä–∏–Ω—ã",
            description=f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{question['category']}`\n\n{question['question']}\n\n{options_text}",
            color=discord.Color.red()
        )
        embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç.")
        avatar_url = CONFIG.get("AVATAR_URL")
        if avatar_url:
            embed.set_thumbnail(url=avatar_url)

        view = QuizView(question)
        await interaction.response.send_message(embed=embed, view=view)
        logger.info(f"{interaction.user} –Ω–∞—á–∞–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {selected_category}")

class CategoryView(View):
    def __init__(self, categories, questions):
        super().__init__(timeout=60)
        self.add_item(CategorySelect(categories, questions))

class QuizCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞", description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")
    async def quiz(self, interaction: discord.Interaction):
        questions = await fetch_questions_from_supabase()
        if not questions:
            await interaction.response.send_message("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.", ephemeral=True)
            logger.error(f"{interaction.user} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –Ω–æ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        categories = list({q['category'].lower() for q in questions})
        if not categories:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", ephemeral=True)
            logger.warning(f"{interaction.user} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        embed = discord.Embed(
            title="üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞",
            description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
            color=discord.Color.blurple()
        )
        await interaction.response.send_message(embed=embed, view=CategoryView(categories, questions), ephemeral=True)
        logger.info(f"{interaction.user} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")

async def setup(bot: commands.Bot):
    await bot.add_cog(QuizCog(bot))
