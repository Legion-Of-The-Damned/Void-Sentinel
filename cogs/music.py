import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import yt_dlp
import os

FFMPEG_OPTIONS = {
    'options': '-vn'
}

YTDL_OPTIONS = {
    'format': 'bestaudio/best',
    'noplaylist': True,
    'quiet': True,
    'extract_flat': False,
    'default_search': 'ytsearch',
    'cookiefile': 'cogs/cookies.txt',  # –¢–≤–æ–π —Ñ–∞–π–ª cookies
}

class ControlView(discord.ui.View):
    def __init__(self, music_cog, user_id):
        super().__init__(timeout=None)
        self.music_cog = music_cog
        self.user_id = user_id

    @discord.ui.button(emoji="‚è∏Ô∏è", style=discord.ButtonStyle.gray)
    async def pause_resume(self, interaction: discord.Interaction, button: discord.ui.Button):
        queue_data = self.music_cog.user_queues.get(self.user_id)
        if queue_data and queue_data['vc']:
            vc = queue_data['vc']
            if vc.is_playing():
                vc.pause()
                await interaction.response.send_message("‚è∏ –ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ.", ephemeral=True)
            elif vc.is_paused():
                vc.resume()
                await interaction.response.send_message("‚ñ∂Ô∏è –ú—É–∑—ã–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞.", ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.", ephemeral=True)

    @discord.ui.button(emoji="‚è≠Ô∏è", style=discord.ButtonStyle.gray)
    async def skip(self, interaction: discord.Interaction, button: discord.ui.Button):
        queue_data = self.music_cog.user_queues.get(self.user_id)
        if queue_data and queue_data['vc'] and queue_data['vc'].is_playing():
            queue_data['vc'].stop()
            await interaction.response.send_message("‚è≠ –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.", ephemeral=True)

    @discord.ui.button(emoji="‚èπÔ∏è", style=discord.ButtonStyle.gray)
    async def stop(self, interaction: discord.Interaction, button: discord.ui.Button):
        queue_data = self.music_cog.user_queues.get(self.user_id)
        if queue_data:
            queue_data['queue'].clear()
            if queue_data['vc']:
                await queue_data['vc'].disconnect()
            self.music_cog.user_queues.pop(self.user_id, None)
            await interaction.response.send_message("‚èπ –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.", ephemeral=True)

    @discord.ui.button(emoji="üîÅ", style=discord.ButtonStyle.gray)
    async def repeat(self, interaction: discord.Interaction, button: discord.ui.Button):
        queue_data = self.music_cog.user_queues.get(self.user_id)
        if queue_data:
            queue_data['repeat'] = not queue_data['repeat']
            status = "–≤–∫–ª—é—á–µ–Ω" if queue_data['repeat'] else "–≤—ã–∫–ª—é—á–µ–Ω"
            await interaction.response.send_message(f"üîÅ –ü–æ–≤—Ç–æ—Ä {status}.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.", ephemeral=True)


class Music(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.user_queues = {}  # –∫–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–∏–µ: {queue, vc, repeat, current}

    async def ensure_voice(self, interaction: discord.Interaction):
        if interaction.user.voice and interaction.user.voice.channel:
            return interaction.user.voice.channel
        else:
            await interaction.response.send_message("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
            return None

    async def player_loop(self, user_id):
        queue_data = self.user_queues[user_id]
        while queue_data['queue']:
            current = queue_data['queue'][0]
            vc = queue_data['vc']

            def after_play(error):
                fut = self.bot.loop.create_task(self.after_song(user_id))
                try:
                    fut.result()
                except:
                    pass

            vc.play(current['source'], after=after_play)

            # Embed —Å —Ç–µ–∫—É—â–∏–º –∏ 5 —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ç—Ä–µ–∫–∞–º–∏
            embed = discord.Embed(title=f"üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {current['title']}", color=discord.Color.blue())
            next_tracks = queue_data['queue'][1:6]
            if next_tracks:
                embed.add_field(name="–°–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–∫–∏:", value="\n".join([t['title'] for t in next_tracks]), inline=False)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            if queue_data.get('msg') is None:
                msg = await current['interaction'].followup.send(embed=embed, view=ControlView(self, user_id))
                queue_data['msg'] = msg
            else:
                try:
                    await queue_data['msg'].edit(embed=embed, view=ControlView(self, user_id))
                except:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    msg = await current['interaction'].followup.send(embed=embed, view=ControlView(self, user_id))
                    queue_data['msg'] = msg

            await asyncio.sleep(1)
            while vc.is_playing() or vc.is_paused():
                await asyncio.sleep(1)
            if not queue_data['repeat']:
                queue_data['queue'].pop(0)

        # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
        if vc.is_connected():
            await vc.disconnect()
        self.user_queues.pop(user_id, None)

    async def after_song(self, user_id):
        queue_data = self.user_queues.get(user_id)
        if queue_data and queue_data['queue']:
            if queue_data['repeat']:
                # –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω, –Ω–µ —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫
                return
            queue_data['queue'].pop(0)
            # –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –æ—á–µ—Ä–µ–¥—å—é –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
            if queue_data['queue'] and queue_data.get('msg'):
                next_tracks = queue_data['queue'][:5]
                embed = discord.Embed(title=f"üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {queue_data['queue'][0]['title']}", color=discord.Color.blue())
                if next_tracks[1:]:
                    embed.add_field(name="–°–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–∫–∏:", value="\n".join([t['title'] for t in next_tracks[1:]]), inline=False)
                try:
                    await queue_data['msg'].edit(embed=embed, view=ControlView(self, user_id))
                except:
                    pass

    @app_commands.command(name="–∏–≥—Ä–∞—Ç—å", description="–ò–≥—Ä–∞–µ—Ç –ø–µ—Å–Ω—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å—Å—ã–ª–∫–µ")
    @app_commands.describe(–∑–∞–ø—Ä–æ—Å="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å—Å—ã–ª–∫–∞")
    async def play(self, interaction: discord.Interaction, –∑–∞–ø—Ä–æ—Å: str):
        channel = await self.ensure_voice(interaction)
        if not channel:
            return

        await interaction.response.defer()

        if not os.path.isfile(YTDL_OPTIONS['cookiefile']):
            await interaction.followup.send("‚ùå –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        user_id = interaction.user.id
        queue_data = self.user_queues.get(user_id)

        if not queue_data:
            vc = await channel.connect()
            self.user_queues[user_id] = {
                'queue': [],
                'vc': vc,
                'repeat': False,
                'current': None,
                'msg': None
            }
            queue_data = self.user_queues[user_id]
        else:
            vc = queue_data['vc']
            if not vc.is_connected():
                vc = await channel.connect()
                queue_data['vc'] = vc

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫
        try:
            with yt_dlp.YoutubeDL(YTDL_OPTIONS) as ydl:
                info = ydl.extract_info(–∑–∞–ø—Ä–æ—Å, download=False)
                if 'entries' in info:
                    info = info['entries'][0]
                url = info['url']
                title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–µ—Å–Ω—è')
        except Exception as e:
            await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞: {e}", ephemeral=True)
            return

        source = discord.FFmpegPCMAudio(url, **FFMPEG_OPTIONS)
        queue_data['queue'].append({'source': source, 'title': title, 'interaction': interaction})

        if len(queue_data['queue']) == 1:
            # –ó–∞–ø—É—Å–∫–∞–µ–º player loop
            asyncio.create_task(self.player_loop(user_id))
        else:
            await interaction.followup.send(f"‚úÖ –¢—Ä–µ–∫ **{title}** –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.", ephemeral=True)


async def setup(bot: commands.Bot):
    await bot.add_cog(Music(bot))
