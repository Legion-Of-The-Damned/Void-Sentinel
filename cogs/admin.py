import discord
import logging
import traceback
from discord import app_commands
from discord.ext import commands
from datetime import timedelta
from discord.ui import Select, View
from data import active_duels, save_active_duels, update_stats  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ –µ—Å—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏/–¥–∞–Ω–Ω—ã–µ

class Admin(commands.Cog):
    def __init__(self, bot: commands.Bot, clan_role_ids: list[int], friend_role_id: int):
        self.bot = bot
        self.clan_role_ids = clan_role_ids
        self.friend_role_id = friend_role_id

    @commands.hybrid_command(name="–ø–æ–±–µ–¥–∞", description="–í—ã–±—Ä–∞—Ç—å –¥—É—ç–ª—å –∏ –ø—Ä–∏—Å—É–¥–∏—Ç—å –ø–æ–±–µ–¥—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
    async def assign_winner_select(self, ctx: commands.Context):
        if not ctx.author.guild_permissions.kick_members:
            return await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", ephemeral=True)

        if not active_duels:
            return await ctx.send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π.", ephemeral=True)

        view = DuelSelectionView(ctx)
        await ctx.send("–í—ã–±–µ—Ä–∏—Ç–µ –¥—É—ç–ª—å, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:", view=view, ephemeral=True)

    @app_commands.command(name="–∏–∑–≥–Ω–∞–Ω–∏–µ", description="–ò–∑–≥–æ–Ω—è–µ—Ç —á–ª–µ–Ω–∞ –∏–∑ –∫–ª–∞–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Ä–æ–ª—å '–î—Ä—É–≥ –∫–ª–∞–Ω–∞'")
    async def banish(self, interaction: discord.Interaction, member: discord.Member):
        if not interaction.user.guild_permissions.kick_members:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", ephemeral=True)
            return

        await interaction.response.defer(thinking=True)

        try:
            await self.banish_from_clan(member)
            await interaction.followup.send(f"‚úÖ {member.mention} –±—ã–ª –∏–∑–≥–Ω–∞–Ω –∏–∑ –∫–ª–∞–Ω–∞ –∏ –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å **–î—Ä—É–≥ –∫–ª–∞–Ω–∞**.")
        except Exception:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≥–Ω–∞–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n" + traceback.format_exc())
            await interaction.followup.send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≥–Ω–∞—Ç—å {member.mention}. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    async def banish_from_clan(self, member: discord.Member):
        roles_to_remove = [r for r in member.roles if r.id in self.clan_role_ids]

        try:
            await member.remove_roles(*roles_to_remove, reason="–ò–∑–≥–Ω–∞–Ω –∏–∑ –∫–ª–∞–Ω–∞ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞)")
        except discord.Forbidden:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Ä–æ–ª–∏ —Å {member.display_name} ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return

        friend_role = discord.utils.get(member.guild.roles, id=self.friend_role_id)
        if friend_role:
            await member.add_roles(friend_role, reason="–ù–∞–∑–Ω–∞—á–µ–Ω –∫–∞–∫ '–î—Ä—É–≥ –∫–ª–∞–Ω–∞' (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞)")

        try:
            await member.send(
                f"–ü—Ä–∏–≤–µ—Ç, {member.name}!\n"
                "–¢—ã –±—ã–ª –∏–∑–≥–Ω–∞–Ω –∏–∑ –∫–ª–∞–Ω–∞, –Ω–æ –æ—Å—Ç–∞–ª—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∫–∞–∫ **–î—Ä—É–≥ –∫–ª–∞–Ω–∞**."
            )
        except discord.Forbidden:
            logging.info(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° —É—á–∞—Å—Ç–Ω–∏–∫—É {member.display_name}.")

    @app_commands.command(name="–±–∞–Ω", description="–ë–∞–Ω–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    async def ban(self, interaction: discord.Interaction, member: discord.Member, reason: str = "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"):
        if not interaction.user.guild_permissions.ban_members:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", ephemeral=True)
            return

        try:
            try:
                await member.send(
                    f"–¢—ã –±—ã–ª **–∑–∞–±–∞–Ω–µ–Ω** –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ **{interaction.guild.name}**.\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {interaction.user.display_name}"
                )
            except discord.Forbidden:
                logging.info(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° —É—á–∞—Å—Ç–Ω–∏–∫—É {member.display_name} –ø–µ—Ä–µ–¥ –±–∞–Ω–æ–º.")

            await member.ban(reason=f"–ó–∞–±–∞–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user} ‚Äî –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            await interaction.response.send_message(f"‚õî {member.mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.", ephemeral=True)

    @app_commands.command(name="—Ä–∞–∑–±–∞–Ω", description="–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –≤—ã–±–æ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–æ–≤")
    @app_commands.describe(user_id="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö")
    async def unban(self, interaction: discord.Interaction, user_id: str, reason: str = "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"):
        if not interaction.user.guild_permissions.ban_members:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", ephemeral=True)
            return

        try:
            user = await self.bot.fetch_user(int(user_id))
        except Exception:
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Å—å, —á—Ç–æ ID —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.", ephemeral=True)
            return

        try:
            await interaction.guild.unban(user, reason=f"–†–∞–∑–±–∞–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user} ‚Äî –ü—Ä–∏—á–∏–Ω–∞: {reason}")

            try:
                await user.send(
                    f"–¢—ã –±—ã–ª **—Ä–∞–∑–±–∞–Ω–µ–Ω** –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ **{interaction.guild.name}**.\n"
                    f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {interaction.user.display_name}\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                )
            except discord.Forbidden:
                logging.info(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.name} –ø–æ—Å–ª–µ —Ä–∞–∑–±–∞–Ω–∞.")

            await interaction.response.send_message(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        except discord.NotFound:
            await interaction.response.send_message("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.", ephemeral=True)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e}")
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", ephemeral=True)

    @unban.autocomplete("user_id")
    async def unban_autocomplete(self, interaction: discord.Interaction, current: str):
        bans = []
        async for ban_entry in interaction.guild.bans():
            bans.append(ban_entry)

        choices = []
        for entry in bans:
            user = entry.user
            display = f"{user.name}#{user.discriminator} ({user.id})"
            if current.lower() in display.lower():
                choices.append(app_commands.Choice(name=display[:100], value=str(user.id)))
            if len(choices) >= 20:
                break
        return choices

    @app_commands.command(name="–∫–∏–∫", description="–ö–∏–∫–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞")
    async def kick(self, interaction: discord.Interaction, member: discord.Member, reason: str = "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"):
        if not interaction.user.guild_permissions.kick_members:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", ephemeral=True)
            return

        try:
            try:
                await member.send(
                    f"–¢—ã –±—ã–ª –∫–∏–∫–Ω—É—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ **{interaction.guild.name}**.\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                )
            except discord.Forbidden:
                logging.info(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° —É—á–∞—Å—Ç–Ω–∏–∫—É {member.display_name} –ø–µ—Ä–µ–¥ –∫–∏–∫–æ–º.")

            await member.kick(reason=f"–ö–∏–∫–Ω—É—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user} ‚Äî –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            await interaction.response.send_message(f"üë¢ {member.mention} –±—ã–ª –∫–∏–∫–Ω—É—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ: {e}")
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.", ephemeral=True)

    @app_commands.command(name="–º—É—Ç", description="–í—ã–¥–∞—ë—Ç –º—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç")
    async def mute(self, interaction: discord.Interaction, member: discord.Member, minutes: int):
        if not interaction.user.guild_permissions.moderate_members:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", ephemeral=True)
            return

        try:
            duration = timedelta(minutes=minutes)

            try:
                await member.send(
                    f"–¢—ã –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ **{minutes} –º–∏–Ω—É—Ç** –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ **{interaction.guild.name}**.\n"
                    f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {interaction.user.display_name}"
                )
            except discord.Forbidden:
                logging.info(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° —É—á–∞—Å—Ç–Ω–∏–∫—É {member.display_name} –ø–µ—Ä–µ–¥ –º—É—Ç–æ–º.")

            await member.timeout(duration, reason=f"–ú—É—Ç –Ω–∞ {minutes} –º–∏–Ω—É—Ç (–≤—ã–¥–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user})")
            await interaction.response.send_message(f"üîá {member.mention} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º—É—Ç–∞: {e}")
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –º—É—Ç.", ephemeral=True)

    @app_commands.command(name="—Ä–∞–∑–º—É—Ç", description="–°–Ω–∏–º–∞–µ—Ç –º—É—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    async def unmute(self, interaction: discord.Interaction, member: discord.Member):
        if not interaction.user.guild_permissions.moderate_members:
            await interaction.response.send_message("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", ephemeral=True)
            return

        try:
            await member.timeout(None, reason=f"–†–∞–∑–º—É—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user}")

            try:
                await member.send(
                    f"–¢—ã –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ **{interaction.guild.name}**.\n"
                    f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {interaction.user.display_name}"
                )
            except discord.Forbidden:
                logging.info(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° —É—á–∞—Å—Ç–Ω–∏–∫—É {member.display_name} –ø–æ—Å–ª–µ —Ä–∞–∑–º—É—Ç–∞.")

            await interaction.response.send_message(f"üîä {member.mention} —Ä–∞–∑–º—É—á–µ–Ω.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –º—É—Ç.", ephemeral=True)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–ø–æ–±–µ–¥–∞

class DuelSelectionView(View):
    def __init__(self, ctx):
        super().__init__(timeout=60)
        self.ctx = ctx
        self.select = Select(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥—É—ç–ª—å", min_values=1, max_values=1)
        for duel_id, duel in active_duels.items():
            guild = ctx.guild
            challenger = guild.get_member(duel["challenger_id"])
            opponent = guild.get_member(duel["opponent_id"])
            if challenger and opponent:
                label = f"{challenger.display_name} vs {opponent.display_name}"
                self.select.add_option(label=label, value=duel_id)
        self.select.callback = self.duel_selected
        self.add_item(self.select)

    async def duel_selected(self, interaction: discord.Interaction):
        if interaction.user != self.ctx.author:
            return await interaction.response.send_message("–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—É—ç–ª—å.", ephemeral=True)

        duel_id = self.select.values[0]
        duel = active_duels.get(duel_id)
        if not duel:
            return await interaction.response.send_message("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)

        guild = interaction.guild
        challenger = guild.get_member(duel["challenger_id"])
        opponent = guild.get_member(duel["opponent_id"])

        await interaction.response.send_message(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥—É—ç–ª—å –º–µ–∂–¥—É {challenger.mention} –∏ {opponent.mention}.\n–ö—Ç–æ –ø–æ–±–µ–¥–∏–ª?",
            view=WinnerButtonsView(duel_id),
            ephemeral=True
        )


class WinnerButtonsView(View):
    def __init__(self, duel_id):
        super().__init__(timeout=30)
        self.duel_id = duel_id
        duel = active_duels.get(duel_id)
        self.challenger_id = duel["challenger_id"]
        self.opponent_id = duel["opponent_id"]

        self.add_item(self.WinnerButton(duel_id, self.challenger_id, label="–ü–æ–±–µ–¥–∏–ª Challenger üü•"))
        self.add_item(self.WinnerButton(duel_id, self.opponent_id, label="–ü–æ–±–µ–¥–∏–ª Opponent üü¶"))

    class WinnerButton(discord.ui.Button):
        def __init__(self, duel_id, winner_id, label):
            super().__init__(label=label, style=discord.ButtonStyle.success)
            self.duel_id = duel_id
            self.winner_id = winner_id

        async def callback(self, interaction: discord.Interaction):
            duel = active_duels.pop(self.duel_id, None)
            if not duel:
                return await interaction.response.send_message("–î—É—ç–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", ephemeral=True)

            loser_id = duel["opponent_id"] if self.winner_id == duel["challenger_id"] else duel["challenger_id"]
            update_stats(self.winner_id, loser_id)
            await save_active_duels()

            winner = interaction.guild.get_member(self.winner_id)
            loser = interaction.guild.get_member(loser_id)

            await interaction.response.send_message(
                f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.mention if winner else self.winner_id}!\n–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {loser.mention if loser else loser_id}.",
                ephemeral=False
            )


async def setup(bot: commands.Bot):
    from config import load_config
    config = load_config()
    await bot.add_cog(Admin(bot, config["CLAN_ROLE_IDS"], config["FRIEND_ROLE_ID"]))
