import discord
from discord import app_commands
from discord.ext import commands
from config import load_config
import asyncio
import logging
from typing import Optional, List, Tuple

config = load_config()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
QUESTIONS: List[str] = [
    "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –∏–≥—Ä—ã —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ç. –¥.)?",
    "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –∫–∞–∫ —Ç—ã —Ä–µ—à–∞–µ—à—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ?",
    "–ö–∞–∫ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º –≤ –∫–ª–∞–Ω–µ?",
    "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å –∞–≥—Ä–µ—Å—Å–∏–µ–π –∏–ª–∏ –Ω–µ—É–¥–∞—á–∞–º–∏ –≤ –∏–≥—Ä–µ?",
    "–¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –∏–≥—Ä–∞—Ç—å –≤ –æ–¥–∏–Ω–æ—á–∫—É –∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ? –ü–æ—á–µ–º—É?",
    "–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –∫—Ä–∏—Ç–∏–∫–µ –∏ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Ç—ã –æ–±—ã—á–Ω–æ –µ—ë –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å?",
    "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —á–ª–µ–Ω–∞–º–∏ –∫–ª–∞–Ω–∞?",
    "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –∏–≥—Ä–∞—Ç—å?",
    "–ë–æ–∏—Ç–µ—Å—å –ª–∏ –≤—ã –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –ª—é–¥–µ–π –∏ —Ç—Ä–µ–≤–æ–∂–∏—Ç –ª–∏ –≤–∞—Å —ç—Ç–æ?",
    "–í–∞—à–∞ —Ü–µ–ª—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª–∞–Ω?",
    "–ö–∞–∫–∞—è –≤–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏ –∫–∞–∫–æ–π —É –≤–∞—Å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å?"
]

APPROVE_EMOJI = "‚úÖ"
DECLINE_EMOJI = "‚ùå"

TIMEOUT_MESSAGE = "‚è± –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã `/–∑–∞—è–≤–∫–∞`."
ERROR_GUILD_MESSAGE = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
ERROR_CHANNEL_MESSAGE = "‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"


class Applications(commands.Cog):
    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot
        self.APPLICATIONS_CHANNEL_ID: int = config.get("APPLICATIONS_CHANNEL_ID")
        self.MEMBER_ROLE_ID: int = config.get("MEMBER_ROLE_ID")
        self.STAFF_ROLE_NAME: str = config.get("STAFF_ROLE_NAME", "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
        self.OLD_ROLE_ID: Optional[int] = config.get("FRIEND_ROLE_ID")
        self.GUILD_ID: int = config.get("GUILD_ID")
        self.logger = logging.getLogger("Applications")

    def is_staff_member(self, member: discord.Member) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º/–∞–¥–º–∏–Ω–æ–º."""
        return member.guild_permissions.administrator or discord.utils.get(
            member.guild.roles, name=self.STAFF_ROLE_NAME
        ) in member.roles

    async def get_user_from_embed(
        self, embed: discord.Embed, guild: discord.Guild
    ) -> Optional[discord.Member]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ footer embed."""
        try:
            if not embed.footer or not embed.footer.text:
                return None
            user_id = int(embed.footer.text.replace("ID:", "").strip())
            return guild.get_member(user_id)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ embed: {e}")
            return None

    async def ask_questions(
        self, member: discord.Member
    ) -> Optional[List[Tuple[str, str]]]:
        """–°–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –õ–°."""
        if member.bot:
            self.logger.warning(f"–ù–µ–ª—å–∑—è —Å–æ–±–∏—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —É –±–æ—Ç–∞ {member}")
            return None

        answers: List[Tuple[str, str]] = []
        try:
            dm = await member.create_dm()
            self.logger.info(f"–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ —É {member}")

            for question in QUESTIONS:
                await dm.send(question)

                def check(m: discord.Message) -> bool:
                    return m.author == member and isinstance(m.channel, discord.DMChannel)

                try:
                    msg = await self.bot.wait_for("message", check=check, timeout=300)
                except asyncio.TimeoutError:
                    await dm.send(TIMEOUT_MESSAGE)
                    self.logger.warning(f"{member} –Ω–µ —É—Å–ø–µ–ª –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –õ–°")
                    return None

                if not msg.content.strip():
                    await dm.send("‚ö† –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                    return None

                answers.append((question, msg.content.strip()))

            self.logger.info(f"{member} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã")
            return answers

        except discord.Forbidden:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –õ–° —Å {member}")
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–æ–≤ —É {member}: {e}")
            return None

    async def safe_dm(self, member: discord.Member, message: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –õ–° —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç Forbidden –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±–æ—Ç–∞."""
        if member.bot:
            self.logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –±–æ—Ç—É: {member}")
            return
        try:
            await member.send(message)
        except discord.Forbidden:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° {member}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –õ–° {member}: {e}")

    @app_commands.command(
        name="–∑–∞—è–≤–∫–∞",
        description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω"
    )
    async def application(self, interaction: discord.Interaction):
        member = interaction.user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
        if member.bot:
            await interaction.response.send_message(
                "‚ö† –ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.", ephemeral=True
            )
            return

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if isinstance(interaction.channel, discord.DMChannel):
            await interaction.response.send_message(
                "–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –õ–°...", ephemeral=True
            )
            self.logger.info(f"{member} –Ω–∞—á–∞–ª –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –õ–°")
        else:
            await interaction.response.send_message(
                "üì© Void Sentinel –∂–¥—ë—Ç –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –õ–°...",
                ephemeral=True
            )
            self.logger.info(f"{member} –Ω–∞—á–∞–ª –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä")

        # –°–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
        answers = await self.ask_questions(member)
        if not answers:
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏
        guild = self.bot.get_guild(self.GUILD_ID)
        if not guild:
            await self.safe_dm(member, ERROR_GUILD_MESSAGE)
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞—è–≤–æ–∫
        application_channel = self.bot.get_channel(self.APPLICATIONS_CHANNEL_ID)
        if not isinstance(application_channel, discord.TextChannel):
            await self.safe_dm(member, ERROR_CHANNEL_MESSAGE)
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ embed —Å –∑–∞—è–≤–∫–æ–π
        embed = discord.Embed(
            title="üìÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
            description=f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {member.mention}",
            color=discord.Color.blue()
        )
        for q, ans in answers:
            embed.add_field(name=q, value=ans, inline=False)
        embed.set_footer(text=f"ID:{member.id}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª
        msg = await application_channel.send(embed=embed)
        await msg.add_reaction(APPROVE_EMOJI)
        await msg.add_reaction(DECLINE_EMOJI)
        self.logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç {member} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {application_channel.name}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        for guild_member in guild.members:
            if self.is_staff_member(guild_member) and not guild_member.bot:
                await self.safe_dm(
                    guild_member,
                    f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {member.mention} –≤ {application_channel.mention}"
                )

    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload: discord.RawReactionActionEvent):
        if payload.channel_id != self.APPLICATIONS_CHANNEL_ID:
            return

        guild = self.bot.get_guild(self.GUILD_ID)
        if not guild:
            self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏")
            return

        member = guild.get_member(payload.user_id)
        if not member or member.bot or not self.is_staff_member(member):
            return

        channel = self.bot.get_channel(payload.channel_id)
        if not isinstance(channel, discord.TextChannel):
            return

        try:
            message = await channel.fetch_message(payload.message_id)
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            return

        if not message.embeds:
            return

        target_member = await self.get_user_from_embed(message.embeds[0], guild)
        if not target_member:
            return

        role = guild.get_role(self.MEMBER_ROLE_ID)
        old_role = guild.get_role(self.OLD_ROLE_ID) if self.OLD_ROLE_ID else None

        try:
            if str(payload.emoji) == APPROVE_EMOJI:
                if old_role and old_role in target_member.roles:
                    await target_member.remove_roles(old_role)
                if role:
                    await target_member.add_roles(role)
                await self.safe_dm(target_member, "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")
                await message.delete()
                self.logger.info(f"–ó–∞—è–≤–∫–∞ {target_member} –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {member}")

            elif str(payload.emoji) == DECLINE_EMOJI:
                await self.safe_dm(target_member, "üòï –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
                await message.delete()
                self.logger.info(f"–ó–∞—è–≤–∫–∞ {target_member} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {member}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏ {target_member}: {e}")


async def setup(bot: commands.Bot):
    await bot.add_cog(Applications(bot))
