import discord
from discord.ext import commands
from discord.ui import Button, View, Select
from datetime import datetime
import asyncio

from data import active_duels, save_active_duels, update_stats, load_data, stats
from cogs.voting import VotingView  # –≤–Ω–µ—à–Ω–∏–π –∫–æ–≥ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥—É—ç–ª–µ–π ---
class Duel(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.hybrid_command(name="–¥—É—ç–ª—å", description="–í—ã–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—É—ç–ª—å")
    async def duel(self, ctx: commands.Context, user: discord.Member, game: str, time: str):
        challenger = ctx.author
        opponent = user
        duel_channel = ctx.channel

        embed = discord.Embed(
            title="‚öîÔ∏è –î—É—ç–ª—å –≤—ã–∑–≤–∞–Ω–∞!",
            description=(f"{challenger.mention} –≤—ã–∑–≤–∞–ª {opponent.mention} –Ω–∞ –¥—É—ç–ª—å!\n"
                         f"**–ò–≥—Ä–∞**: {game}\n"
                         f"**–í—Ä–µ–º—è**: {time}\n"
                         f"{opponent.mention}, –ø—Ä–∏–º–µ—Ç–µ –ª–∏ –≤—ã –≤—ã–∑–æ–≤?"),
            color=discord.Color.dark_red()
        )

        view = AcceptDuelView(challenger, opponent, duel_channel, self.bot, game, time)
        await ctx.send(embed=embed, view=view)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–° –≤—ã–∑–≤–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
        try:
            dm_embed = discord.Embed(
                title="üì¨ –¢–µ–±—è –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å!",
                description=(f"–¢–µ–±—è –≤—ã–∑–≤–∞–ª: **{challenger.display_name}**\n"
                             f"**–ò–≥—Ä–∞:** {game}\n"
                             f"**–í—Ä–µ–º—è:** {time}\n"
                             f"–ú–µ—Å—Ç–æ –¥—É—ç–ª–∏: {duel_channel.mention}\n\n"
                             f"–ü—Ä–∏–º–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏ –≤—ã–∑–æ–≤ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ!"),
                color=discord.Color.orange()
            )
            dm_embed.set_footer(text="–ù–µ –∑–∞–±—É–¥—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —á–∞—Ç –∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ ‚öîÔ∏è")
            await opponent.send(embed=dm_embed)
        except discord.Forbidden:
            await ctx.send(f"‚ö†Ô∏è {opponent.mention}, —è –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.")

# --- Views –∏ –∫–Ω–æ–ø–∫–∏ ---
class AcceptDuelView(View):
    def __init__(self, challenger, opponent, duel_channel, bot, game, time):
        super().__init__(timeout=None)
        self.challenger = challenger
        self.opponent = opponent
        self.duel_channel = duel_channel
        self.bot = bot
        self.game = game
        self.time = time

        self.add_item(self.AcceptButton(self))
        self.add_item(self.DeclineButton(self))

    class AcceptButton(Button):
        def __init__(self, parent_view):
            super().__init__(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success, emoji="‚úîÔ∏è")
            self.parent_view = parent_view

        async def callback(self, interaction: discord.Interaction):
            challenger = self.parent_view.challenger
            opponent = self.parent_view.opponent
            duel_channel = self.parent_view.duel_channel
            bot = self.parent_view.bot
            game = self.parent_view.game
            time = self.parent_view.time

            if interaction.user != opponent:
                return await interaction.response.send_message(
                    "–¢–æ–ª—å–∫–æ –≤—ã–∑–≤–∞–Ω–Ω—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤!", ephemeral=True
                )

            duel_id = f"{challenger.display_name}-{opponent.display_name}"
            active_duels[duel_id] = {
                "player1": challenger.display_name,
                "player2": opponent.display_name,
                "game": game,
                "time": time,
                "status": "active",
                "start_time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—É—ç–ª—å –≤ –±–∞–∑–µ
            await save_active_duels(bot)

            await interaction.response.send_message(
                f"–î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞! {opponent.mention} –ø—Ä–æ—Ç–∏–≤ {challenger.mention}!",
                ephemeral=False
            )

            embed = discord.Embed(
                title="‚öîÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!",
                description=f"–ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç?\n\nüü• {challenger.mention}\nüü¶ {opponent.mention}",
                color=discord.Color.gold()
            )

            view = VotingView(challenger, opponent, duel_channel, bot)
            await duel_channel.send(embed=embed, view=view)

    class DeclineButton(Button):
        def __init__(self, parent_view):
            super().__init__(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, emoji="‚úñÔ∏è")
            self.parent_view = parent_view

        async def callback(self, interaction: discord.Interaction):
            challenger = self.parent_view.challenger
            opponent = self.parent_view.opponent

            if interaction.user != opponent:
                return await interaction.response.send_message(
                    "–¢–æ–ª—å–∫–æ –≤—ã–∑–≤–∞–Ω–Ω—ã–π –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤!", ephemeral=True
                )

            await interaction.response.send_message(
                f"{opponent.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª –¥—É—ç–ª—å —Å {challenger.mention}.",
                ephemeral=False
            )

# --- Selection View –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ---
class DuelSelectionView(View):
    def __init__(self, ctx):
        super().__init__(timeout=60)
        self.ctx = ctx
        self.select = Select(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥—É—ç–ª—å", min_values=1, max_values=1)
        guild = ctx.guild

        for duel_id, duel in active_duels.items():
            challenger_name = duel.get("player1")
            opponent_name = duel.get("player2")
            if not challenger_name or not opponent_name:
                continue
            challenger = discord.utils.get(guild.members, name=challenger_name)
            opponent = discord.utils.get(guild.members, name=opponent_name)
            label = f"{challenger.display_name if challenger else challenger_name} vs {opponent.display_name if opponent else opponent_name}"
            self.select.add_option(label=label, value=duel_id)

        self.select.callback = self.duel_selected
        self.add_item(self.select)

    async def duel_selected(self, interaction: discord.Interaction):
        if interaction.user != self.ctx.author:
            return await interaction.response.send_message("–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—É—ç–ª—å.", ephemeral=True)

        duel_id = self.select.values[0]
        duel = active_duels.get(duel_id)
        if not duel:
            return await interaction.response.send_message("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)

        guild = interaction.guild
        challenger_name = duel.get("player1")
        opponent_name = duel.get("player2")
        challenger = discord.utils.get(guild.members, name=challenger_name)
        opponent = discord.utils.get(guild.members, name=opponent_name)

        await interaction.response.send_message(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥—É—ç–ª—å –º–µ–∂–¥—É {challenger.mention if challenger else challenger_name} –∏ {opponent.mention if opponent else opponent_name}.\n–ö—Ç–æ –ø–æ–±–µ–¥–∏–ª?",
            view=WinnerButtonsView(duel_id, interaction.client),
            ephemeral=True
        )

# --- –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ---
class WinnerButtonsView(View):
    def __init__(self, duel_id, bot):
        super().__init__(timeout=30)
        self.duel_id = duel_id
        self.bot = bot
        duel = active_duels.get(duel_id)
        if not duel:
            return

        self.player1 = duel.get("player1")
        self.player2 = duel.get("player2")

        self.add_item(self.WinnerButton(duel_id, self.player1, bot, label=f"–ü–æ–±–µ–¥–∏–ª {self.player1} üü•"))
        self.add_item(self.WinnerButton(duel_id, self.player2, bot, label=f"–ü–æ–±–µ–¥–∏–ª {self.player2} üü¶"))

    class WinnerButton(Button):
        def __init__(self, duel_id, winner_name, bot, label):
            super().__init__(label=label, style=discord.ButtonStyle.success)
            self.duel_id = duel_id
            self.winner_name = winner_name
            self.bot = bot

        async def callback(self, interaction: discord.Interaction):
            duel = active_duels.pop(self.duel_id, None)
            if not duel:
                return await interaction.response.send_message("–î—É—ç–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", ephemeral=True)

            loser_name = duel["player2"] if self.winner_name == duel["player1"] else duel["player1"]

            update_stats(self.winner_name, loser_name)
            await save_active_duels(self.bot)

            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            guild = interaction.guild
            winner_member = discord.utils.get(guild.members, name=self.winner_name)
            loser_member = discord.utils.get(guild.members, name=loser_name)

            await interaction.response.send_message(
                f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_member.mention if winner_member else self.winner_name}!\n"
                f"–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {loser_member.mention if loser_member else loser_name}.",
                ephemeral=False
            )

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∑–∞–ø—É—Å–∫ ---
async def setup(bot: commands.Bot):
    await load_data()
    await bot.add_cog(Duel(bot))