import discord
from discord.ext import commands
from discord.ui import Button, View, Select
from discord import app_commands
import json
import base64
import asyncio
from github import Github

# --- GitHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
GITHUB_TOKEN = "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"
REPO_NAME = "Legion-Of-The-Damned/duel-stats-public"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GitHub
g = Github(GITHUB_TOKEN)
repo = g.get_repo(REPO_NAME)

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub ---

def load_github_json(filename):
    try:
        contents = repo.get_contents(filename)
        decoded = base64.b64decode(contents.content).decode("utf-8")
        return json.loads(decoded)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return {}

def save_github_json(filename, data, commit_message="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"):
    json_data = json.dumps(data, indent=4, ensure_ascii=False)
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π sha –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        contents = repo.get_contents(filename)
        repo.update_file(contents.path, commit_message, json_data, contents.sha)
    except Exception as e:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º
        if "404" in str(e) or "Not Found" in str(e):
            try:
                repo.create_file(filename, commit_message, json_data)
            except Exception as err:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {err}")
        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è sha
        elif "409" in str(e):
            try:
                contents = repo.get_contents(filename)  # –∑–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∏—Ç—å
                repo.update_file(contents.path, commit_message, json_data, contents.sha)
            except Exception as err:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {filename}: {err}")
        else:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")

async def async_load_json(filename):
    return await asyncio.to_thread(load_github_json, filename)

async def async_save_json(filename, data, commit_message="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"):
    await asyncio.to_thread(save_github_json, filename, data, commit_message)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
active_duels = {}
stats = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---
async def load_data():
    global active_duels, stats
    active_duels = await async_load_json("active_duels.json")
    stats = await async_load_json("duel_stats.json")

async def save_active_duels():
    await async_save_json("active_duels.json", active_duels, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π")

async def save_stats():
    await async_save_json("duel_stats.json", stats, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É—ç–ª–µ–π")

def update_stats(winner_id, loser_id):
    global stats
    for user_id in (str(winner_id), str(loser_id)):
        if user_id not in stats:
            stats[user_id] = {"wins": 0, "losses": 0}
    stats[str(winner_id)]["wins"] += 1
    stats[str(loser_id)]["losses"] += 1
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ ‚Äî –±–µ–∑ await, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    asyncio.create_task(save_stats())

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ ID ---
def mention_user(user_id):
    return f"<@{user_id}>"

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥—É—ç–ª–µ–π ---
class Duel(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.hybrid_command(name="–ø–æ–±–µ–¥–∞", description="–í—ã–±—Ä–∞—Ç—å –¥—É—ç–ª—å –∏ –ø—Ä–∏—Å—É–¥–∏—Ç—å –ø–æ–±–µ–¥—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
    async def assign_winner_select(self, ctx: commands.Context):
        if not ctx.author.guild_permissions.kick_members:
            return await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", ephemeral=True)

        if not active_duels:
            return await ctx.send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π.", ephemeral=True)

        view = DuelSelectionView(ctx)
        await ctx.send("–í—ã–±–µ—Ä–∏—Ç–µ –¥—É—ç–ª—å, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:", view=view, ephemeral=True)

    @commands.hybrid_command(name="–¥—É—ç–ª—å", description="–í—ã–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—É—ç–ª—å")
    async def duel(self, ctx: commands.Context, user: discord.Member, game: str, time: str):
        challenger = ctx.author
        opponent = user
        duel_channel = ctx.channel

        embed = discord.Embed(
            title="‚öîÔ∏è –î—É—ç–ª—å –≤—ã–∑–≤–∞–Ω–∞!",
            description=(f"{challenger.mention} –≤—ã–∑–≤–∞–ª {opponent.mention} –Ω–∞ –¥—É—ç–ª—å!\n"
                         f"**–ò–≥—Ä–∞**: {game}\n"
                         f"**–í—Ä–µ–º—è**: {time}\n"
                         f"{opponent.mention}, –ø—Ä–∏–º–µ—Ç–µ –ª–∏ –≤—ã –≤—ã–∑–æ–≤?"),
            color=discord.Color.dark_red()
        )

        view = AcceptDuelView(challenger, opponent, duel_channel, self.bot)
        await ctx.send(embed=embed, view=view)

        try:
            dm_embed = discord.Embed(
                title="üì¨ –¢–µ–±—è –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å!",
                description=(
                    f"–¢–µ–±—è –≤—ã–∑–≤–∞–ª –Ω–∞ –¥—É—ç–ª—å: **{challenger.display_name}**\n"
                    f"**–ò–≥—Ä–∞:** {game}\n"
                    f"**–í—Ä–µ–º—è:** {time}\n"
                    f"–ú–µ—Å—Ç–æ –¥—É—ç–ª–∏: {duel_channel.mention}\n\n"
                    f"–ü—Ä–∏–º–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏ –≤—ã–∑–æ–≤ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ!"
                ),
                color=discord.Color.orange()
            )
            dm_embed.set_footer(text="–ù–µ –∑–∞–±—É–¥—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —á–∞—Ç –∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ ‚öîÔ∏è")
            await opponent.send(embed=dm_embed)
        except discord.Forbidden:
            await ctx.send(
                f"‚ö†Ô∏è {opponent.mention}, —è –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –õ–°. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.",
                ephemeral=True
            )

    @commands.hybrid_command(name="—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    async def stats_command(self, ctx: commands.Context, user: discord.Member):
        user_stats = stats.get(str(user.id), {"wins": 0, "losses": 0})
        await ctx.send(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user.mention}:\n"
            f"–ü–æ–±–µ–¥—ã: {user_stats['wins']}\n"
            f"–ü–æ—Ä–∞–∂–µ–Ω–∏—è: {user_stats['losses']}"
        )

    @app_commands.command(name="–æ–±—â–∞—è_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º")
    async def all_stats(self, interaction: discord.Interaction):
        if not stats:
            await interaction.response.send_message("üìâ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–æ—è—Ö.")
            return

        guild = interaction.guild
        stats_list = []
        for user_id_str, data in stats.items():
            user_id = int(user_id_str)
            member = guild.get_member(user_id)
            name = member.display_name if member else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
            wins = data.get("wins", 0)
            losses = data.get("losses", 0)
            total = wins + losses
            stats_list.append((name, wins, losses, total))

        stats_list.sort(key=lambda x: x[1], reverse=True)

        lines = ["**üèÜ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π:**\n"]
        for i, (name, wins, losses, total) in enumerate(stats_list, 1):
            lines.append(f"{i}. **{name}** ‚Äî üü¢ –ü–æ–±–µ–¥: {wins}, üî¥ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}, ‚öî –í—Å–µ–≥–æ: {total}")

        embed = discord.Embed(
            title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π",
            description="\n".join(lines),
            color=discord.Color.gold()
        )
        embed.set_footer(text=f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {interaction.user.display_name}", icon_url=interaction.user.display_avatar.url)
        embed.timestamp = discord.utils.utcnow()

        await interaction.response.send_message(embed=embed)

# --- Views –∏ –∫–Ω–æ–ø–∫–∏ ---

class AcceptDuelView(View):
    def __init__(self, challenger, opponent, duel_channel, bot):
        super().__init__(timeout=None)
        self.challenger = challenger
        self.opponent = opponent
        self.duel_channel = duel_channel
        self.bot = bot
        self.add_item(self.AcceptButton(self))
        self.add_item(self.DeclineButton(self))

    class AcceptButton(Button):
        def __init__(self, parent):
            super().__init__(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success, emoji="‚úîÔ∏è")
            self.parent = parent

        async def callback(self, interaction: discord.Interaction):
            if interaction.user != self.parent.opponent:
                return await interaction.response.send_message("–¢–æ–ª—å–∫–æ –≤—ã–∑–≤–∞–Ω–Ω—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤!", ephemeral=True)

            duel_id = f"{self.parent.challenger.id}-{self.parent.opponent.id}"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç—ã Discord
            active_duels[duel_id] = {
                "challenger_id": self.parent.challenger.id,
                "opponent_id": self.parent.opponent.id
            }
            await save_active_duels()

            await interaction.response.send_message(
                f"–î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞! {self.parent.opponent.mention} –ø—Ä–æ—Ç–∏–≤ {self.parent.challenger.mention}!",
                ephemeral=False
            )

            embed = discord.Embed(
                title="‚öîÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!",
                description=(f"–ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç?\n\nüü• {self.parent.challenger.mention}\nüü¶ {self.parent.opponent.mention}"),
                color=discord.Color.gold()
            )

            webhook = await self.parent.duel_channel.create_webhook(name="Duel Voting")
            view = VotingView(
                challenger=self.parent.challenger,
                opponent=self.parent.opponent,
                webhook=webhook
            )
            await webhook.send(embed=embed, view=view, avatar_url=self.parent.challenger.avatar.url)
            await webhook.delete()

    class DeclineButton(Button):
        def __init__(self, parent):
            super().__init__(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, emoji="‚úñÔ∏è")
            self.parent = parent

        async def callback(self, interaction: discord.Interaction):
            if interaction.user != self.parent.opponent:
                return await interaction.response.send_message("–¢–æ–ª—å–∫–æ –≤—ã–∑–≤–∞–Ω–Ω—ã–π –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤!", ephemeral=True)

            await interaction.response.send_message(
                f"{self.parent.opponent.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª –¥—É—ç–ª—å —Å {self.parent.challenger.mention}.",
                ephemeral=False
            )

class VotingView(View):
    def __init__(self, challenger, opponent, webhook):
        super().__init__(timeout=60)
        self.challenger = challenger
        self.opponent = opponent
        self.votes = {"challenger": 0, "opponent": 0}
        self.voters = {}
        self.webhook = webhook

        self.add_item(self.VoteButton("üü• –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞", self.challenger, "challenger"))
        self.add_item(self.VoteButton("üü¶ –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞", self.opponent, "opponent"))

    class VoteButton(Button):
        def __init__(self, label, member, vote_key):
            super().__init__(label=label, style=discord.ButtonStyle.primary)
            self.member = member
            self.vote_key = vote_key

        async def callback(self, interaction: discord.Interaction):
            parent_view: VotingView = self.view
            if interaction.user.bot:
                return await interaction.response.defer()

            if interaction.user in [parent_view.challenger, parent_view.opponent]:
                return await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ —Å–≤–æ–µ–π –¥—É—ç–ª–∏!", ephemeral=True)

            if interaction.user.id in parent_view.voters:
                return await interaction.response.send_message("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!", ephemeral=True)

            parent_view.voters[interaction.user.id] = self.vote_key
            parent_view.votes[self.vote_key] += 1
            await interaction.response.send_message(f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {self.member.mention}!", ephemeral=True)

    async def on_timeout(self):
        winner = (
            self.challenger if self.votes["challenger"] > self.votes["opponent"]
            else self.opponent if self.votes["challenger"] < self.votes["opponent"]
            else None
        )

        embed = discord.Embed(
            title="‚öîÔ∏è –ò—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
            description=(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {winner.mention}!" if winner else "–ù–∏—á—å—è! –ì–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å –ø–æ—Ä–æ–≤–Ω—É."),
            color=discord.Color.green()
        )

        challenger_voters = [mention_user(uid) for uid, vote in self.voters.items() if vote == "challenger"]
        opponent_voters = [mention_user(uid) for uid, vote in self.voters.items() if vote == "opponent"]

        embed.add_field(name="üü• –ó–∞", value="\n".join(challenger_voters) or "–ù–µ—Ç", inline=True)
        embed.add_field(name="üü¶ –ó–∞", value="\n".join(opponent_voters) or "–ù–µ—Ç", inline=True)

        try:
            await self.webhook.send(embed=embed)
        except discord.NotFound:
            pass

        try:
            await self.webhook.delete()
        except discord.NotFound:
            pass

class DuelSelectionView(View):
    def __init__(self, ctx):
        super().__init__(timeout=60)
        self.ctx = ctx
        self.select = Select(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥—É—ç–ª—å", min_values=1, max_values=1)
        for duel_id, duel in active_duels.items():
            # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ ID, –µ—Å–ª–∏ –æ–Ω–∏ –æ–Ω–ª–∞–π–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            guild = ctx.guild
            challenger = guild.get_member(duel["challenger_id"])
            opponent = guild.get_member(duel["opponent_id"])
            if challenger and opponent:
                label = f"{challenger.display_name} vs {opponent.display_name}"
                self.select.add_option(label=label, value=duel_id)
        self.select.callback = self.duel_selected
        self.add_item(self.select)

    async def duel_selected(self, interaction: discord.Interaction):
        if interaction.user != self.ctx.author:
            return await interaction.response.send_message("–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—É—ç–ª—å.", ephemeral=True)

        duel_id = self.select.values[0]
        duel = active_duels.get(duel_id)
        if not duel:
            return await interaction.response.send_message("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)

        guild = interaction.guild
        challenger = guild.get_member(duel["challenger_id"])
        opponent = guild.get_member(duel["opponent_id"])

        await interaction.response.send_message(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥—É—ç–ª—å –º–µ–∂–¥—É {challenger.mention} –∏ {opponent.mention}.\n"
            f"–ö—Ç–æ –ø–æ–±–µ–¥–∏–ª?",
            view=WinnerButtonsView(duel_id),
            ephemeral=True
        )

class WinnerButtonsView(View):
    def __init__(self, duel_id):
        super().__init__(timeout=30)
        self.duel_id = duel_id
        duel = active_duels.get(duel_id)
        guild = None
        # –¢—É—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≥–∏–ª—å–¥–∏–∏
        # –ù–æ —Ç.–∫. —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ duel_id, –æ—Å—Ç–∞–≤–∏–º —ç—Ç–æ —Ç–∞–∫
        # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä—è–º–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        self.challenger_id = duel["challenger_id"]
        self.opponent_id = duel["opponent_id"]

        # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ —Å –º–µ—Ç–∫–∞–º–∏
        self.add_item(self.WinnerButton(duel_id, self.challenger_id, label="–ü–æ–±–µ–¥–∏–ª Challenger üü•"))
        self.add_item(self.WinnerButton(duel_id, self.opponent_id, label="–ü–æ–±–µ–¥–∏–ª Opponent üü¶"))

    class WinnerButton(Button):
        def __init__(self, duel_id, winner_id, label):
            super().__init__(label=label, style=discord.ButtonStyle.success)
            self.duel_id = duel_id
            self.winner_id = winner_id

        async def callback(self, interaction: discord.Interaction):
            duel = active_duels.pop(self.duel_id, None)
            if not duel:
                return await interaction.response.send_message("–î—É—ç–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", ephemeral=True)

            loser_id = duel["opponent_id"] if self.winner_id == duel["challenger_id"] else duel["challenger_id"]
            update_stats(self.winner_id, loser_id)
            await save_active_duels()

            winner = interaction.guild.get_member(self.winner_id)
            loser = interaction.guild.get_member(loser_id)

            await interaction.response.send_message(
                f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.mention if winner else self.winner_id}!\n–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {loser.mention if loser else loser_id}.",
                ephemeral=False
            )

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∑–∞–ø—É—Å–∫ ---

async def setup(bot: commands.Bot):
    await load_data()
    await bot.add_cog(Duel(bot))
