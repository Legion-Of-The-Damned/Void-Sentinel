import discord
from discord.ext import commands
from discord.ui import Button, View, Select
from discord import app_commands
import asyncio

from data import active_duels, save_active_duels, update_stats, load_data
from cogs.voting import VotingView

class Duel(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.hybrid_command(name="–¥—É—ç–ª—å", description="–í—ã–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—É—ç–ª—å")
    async def duel(self, ctx: commands.Context, user: discord.Member, game: str, time: str):
        challenger = ctx.author
        opponent = user
        duel_channel = ctx.channel

        embed = discord.Embed(
            title="‚öîÔ∏è –î—É—ç–ª—å –≤—ã–∑–≤–∞–Ω–∞!",
            description=(f"{challenger.mention} –≤—ã–∑–≤–∞–ª {opponent.mention} –Ω–∞ –¥—É—ç–ª—å!\n"
                         f"**–ò–≥—Ä–∞**: {game}\n"
                         f"**–í—Ä–µ–º—è**: {time}\n"
                         f"{opponent.mention}, –ø—Ä–∏–º–µ—Ç–µ –ª–∏ –≤—ã –≤—ã–∑–æ–≤?"),
            color=discord.Color.dark_red()
        )

        view = AcceptDuelView(challenger, opponent, duel_channel, self.bot)
        await ctx.send(embed=embed, view=view)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –õ–°
        try:
            dm_embed = discord.Embed(
                title="üì¨ –¢–µ–±—è –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å!",
                description=(f"–¢–µ–±—è –≤—ã–∑–≤–∞–ª –Ω–∞ –¥—É—ç–ª—å: **{challenger.display_name}**\n"
                             f"**–ò–≥—Ä–∞:** {game}\n"
                             f"**–í—Ä–µ–º—è:** {time}\n"
                             f"–ú–µ—Å—Ç–æ –¥—É—ç–ª–∏: {duel_channel.mention}\n\n"
                             f"–ü—Ä–∏–º–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏ –≤—ã–∑–æ–≤ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ!"),
                color=discord.Color.orange()
            )
            dm_embed.set_footer(text="–ù–µ –∑–∞–±—É–¥—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —á–∞—Ç –∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ ‚öîÔ∏è")
            await opponent.send(embed=dm_embed)
        except discord.Forbidden:
            await ctx.send(
                f"‚ö†Ô∏è {opponent.mention}, —è –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –õ–°. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏."
            )

class AcceptDuelView(View):
    def __init__(self, challenger, opponent, duel_channel, bot, timeout=600):
        super().__init__(timeout=timeout)
        self.challenger = challenger
        self.opponent = opponent
        self.duel_channel = duel_channel
        self.bot = bot

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è –≤–º–µ—Å—Ç–æ 'parent'
        self.add_item(self.AcceptButton(self))
        self.add_item(self.DeclineButton(self))

    class AcceptButton(Button):
        def __init__(self, duel_view):
            super().__init__(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success, emoji="‚úîÔ∏è")
            self.duel_view = duel_view

        async def callback(self, interaction: discord.Interaction):
            if interaction.user.id != self.duel_view.opponent.id:
                return await interaction.response.send_message("–¢–æ–ª—å–∫–æ –≤—ã–∑–≤–∞–Ω–Ω—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤!", ephemeral=True)

            duel_id = f"{self.duel_view.challenger.id}-{self.duel_view.opponent.id}"
            active_duels[duel_id] = {
                "challenger_id": self.duel_view.challenger.id,
                "opponent_id": self.duel_view.opponent.id
            }
            await save_active_duels()

            await interaction.response.send_message(
                f"–î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞! {self.duel_view.opponent.mention} –ø—Ä–æ—Ç–∏–≤ {self.duel_view.challenger.mention}!",
                ephemeral=False
            )

            # –°–æ–∑–¥–∞—ë–º webhook –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ VotingView
            webhook = await self.duel_view.duel_channel.create_webhook(name="Duel Voting")
            view = VotingView(
                challenger=self.duel_view.challenger,
                opponent=self.duel_view.opponent,
                channel=self.duel_view.duel_channel,
                webhook=webhook
            )

            embed = discord.Embed(
                title="‚öîÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!",
                description=f"–ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç?\nüü• {self.duel_view.challenger.mention}\nüü¶ {self.duel_view.opponent.mention}",
                color=discord.Color.gold()
            )
            await webhook.send(embed=embed, view=view)

    class DeclineButton(Button):
        def __init__(self, duel_view):
            super().__init__(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, emoji="‚úñÔ∏è")
            self.duel_view = duel_view

        async def callback(self, interaction: discord.Interaction):
            if interaction.user.id != self.duel_view.opponent.id:
                return await interaction.response.send_message("–¢–æ–ª—å–∫–æ –≤—ã–∑–≤–∞–Ω–Ω—ã–π –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤!", ephemeral=True)

            await interaction.response.send_message(
                f"{self.duel_view.opponent.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª –¥—É—ç–ª—å —Å {self.duel_view.challenger.mention}.",
                ephemeral=False
            )

class DuelSelectionView(View):
    def __init__(self, ctx):
        super().__init__(timeout=60)
        self.ctx = ctx
        self.select = Select(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥—É—ç–ª—å", min_values=1, max_values=1)
        for duel_id, duel in active_duels.items():
            guild = ctx.guild
            challenger = guild.get_member(duel["challenger_id"])
            opponent = guild.get_member(duel["opponent_id"])
            if challenger and opponent:
                label = f"{challenger.display_name} vs {opponent.display_name}"
                self.select.add_option(label=label, value=duel_id)
        self.select.callback = self.duel_selected
        self.add_item(self.select)

    async def duel_selected(self, interaction: discord.Interaction):
        if interaction.user != self.ctx.author:
            return await interaction.response.send_message("–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—É—ç–ª—å.", ephemeral=True)

        duel_id = self.select.values[0]
        duel = active_duels.get(duel_id)
        if not duel:
            return await interaction.response.send_message("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)

        guild = interaction.guild
        challenger = guild.get_member(duel["challenger_id"])
        opponent = guild.get_member(duel["opponent_id"])
        if not challenger or not opponent:
            return await interaction.response.send_message("–û–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –≤ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)

        await interaction.response.send_message(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥—É—ç–ª—å –º–µ–∂–¥—É {challenger.mention} –∏ {opponent.mention}.\n–ö—Ç–æ –ø–æ–±–µ–¥–∏–ª?",
            view=WinnerButtonsView(duel_id),
            ephemeral=True
        )

class WinnerButtonsView(View):
    def __init__(self, duel_id):
        super().__init__(timeout=30)
        self.duel_id = duel_id
        duel = active_duels.get(duel_id)
        if not duel:
            return
        self.challenger_id = duel["challenger_id"]
        self.opponent_id = duel["opponent_id"]

        self.add_item(self.WinnerButton(duel_id, self.challenger_id, label="–ü–æ–±–µ–¥–∏–ª Challenger üü•"))
        self.add_item(self.WinnerButton(duel_id, self.opponent_id, label="–ü–æ–±–µ–¥–∏–ª Opponent üü¶"))

    class WinnerButton(Button):
        def __init__(self, duel_id, winner_id, label):
            super().__init__(label=label, style=discord.ButtonStyle.success)
            self.duel_id = duel_id
            self.winner_id = winner_id

        async def callback(self, interaction: discord.Interaction):
            duel = active_duels.pop(self.duel_id, None)
            if not duel:
                return await interaction.response.send_message("–î—É—ç–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", ephemeral=True)

            loser_id = duel["opponent_id"] if self.winner_id == duel["challenger_id"] else duel["challenger_id"]
            update_stats(self.winner_id, loser_id)
            await save_active_duels()

            winner = interaction.guild.get_member(self.winner_id)
            loser = interaction.guild.get_member(loser_id)

            await interaction.response.send_message(
                f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.mention if winner else self.winner_id}!\n–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {loser.mention if loser else loser_id}.",
                ephemeral=False
            )

async def setup(bot: commands.Bot):
    await load_data()
    await bot.add_cog(Duel(bot))
