import discord
from discord.ext import commands
import asyncio
import yt_dlp
import logging

logger = logging.getLogger("music")

class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.queues = {}  # —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –ø–æ guild.id

    def get_queue(self, guild_id):
        if guild_id not in self.queues:
            self.queues[guild_id] = {"queue": [], "now_playing": None, "loop": False}
        return self.queues[guild_id]

    async def play_next(self, interaction):
        queue_data = self.get_queue(interaction.guild.id)
        try:
            if queue_data["loop"] and queue_data["now_playing"]:
                queue_data["queue"].append(queue_data["now_playing"])

            if queue_data["queue"]:
                next_song = queue_data["queue"].pop(0)
                await self.play_song(interaction, next_song)
            else:
                vc = interaction.guild.voice_client
                if vc and vc.is_connected():
                    await vc.disconnect()
                queue_data["now_playing"] = None
                logger.info(f"üéµ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –±–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç {interaction.guild.name}")
        except IndexError:
            # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            queue_data["now_playing"] = None
            vc = interaction.guild.voice_client
            if vc and vc.is_connected():
                await vc.disconnect()
            logger.info(f"üéµ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –±–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç {interaction.guild.name}")

    async def play_song(self, interaction, url):
        queue_data = self.get_queue(interaction.guild.id)
        ydl_opts = {
            "format": "bestaudio",
            "quiet": True,
            "default_search": "ytsearch",
            "noplaylist": True
        }

        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                if "entries" in info:
                    info = info["entries"][0]
                url2 = info["url"]
                title = info["title"]
        except yt_dlp.utils.DownloadError as e:
            await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}", ephemeral=True)
            logger.error(f"–û—à–∏–±–∫–∞ yt-dlp –¥–ª—è {url}: {e}")
            await self.play_next(interaction)
            return
        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è {url}: {e}")
            await self.play_next(interaction)
            return

        vc = interaction.guild.voice_client
        if not vc:
            if interaction.user.voice and interaction.user.voice.channel:
                vc = await interaction.user.voice.channel.connect()
            else:
                await interaction.followup.send("‚ùå –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!", ephemeral=True)
                return

        ffmpeg_opts = {
            "before_options": "-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
            "options": "-vn"
        }

        try:
            source = await discord.FFmpegOpusAudio.from_probe(url2, **ffmpeg_opts)
            vc.play(
                source, 
                after=lambda e: asyncio.run_coroutine_threadsafe(self.play_next(interaction), self.bot.loop)
            )
            queue_data["now_playing"] = title
            await interaction.followup.send(f"üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **{title}**")
        except Exception as e:
            await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}", ephemeral=True)
            logger.error(f"–û—à–∏–±–∫–∞ ffmpeg –¥–ª—è {url}: {e}")
            await self.play_next(interaction)

    @commands.command(name="play")
    async def play_command(self, ctx, *, url: str):
        """–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –º—É–∑—ã–∫—É —Å YouTube"""
        queue_data = self.get_queue(ctx.guild.id)
        queue_data["queue"].append(url)
        vc = ctx.guild.voice_client
        if not vc or not vc.is_playing():
            await self.play_next(ctx)
        else:
            await ctx.send(f"‚ûï –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: {url}")

    @commands.command(name="skip")
    async def skip_command(self, ctx):
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"""
        vc = ctx.guild.voice_client
        if vc and vc.is_playing():
            vc.stop()
            await ctx.send("‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
        else:
            await ctx.send("‚ö† –ù–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å.")

    @commands.command(name="stop")
    async def stop_command(self, ctx):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º—É–∑—ã–∫—É –∏ –æ—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å"""
        vc = ctx.guild.voice_client
        if vc:
            await vc.disconnect()
        self.queues.pop(ctx.guild.id, None)
        await ctx.send("üõë –ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.")


async def setup(bot):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è cogs"""
    await bot.add_cog(Music(bot))
