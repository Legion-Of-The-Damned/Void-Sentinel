import json
import base64
import asyncio
import logging
from github import Github
from config import load_config

logger = logging.getLogger("github_data")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitHub ---
config = load_config()
GITHUB_TOKEN = config["GITHUB_TOKEN"]
REPO_NAME = config["REPO_NAME"]

g = Github(GITHUB_TOKEN)
repo = g.get_repo(REPO_NAME)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
stats = {}
active_duels = {}

# --- –†–∞–±–æ—Ç–∞ —Å GitHub ---
def load_github_json(filename):
    try:
        contents = repo.get_contents(filename)
        decoded = base64.b64decode(contents.content).decode("utf-8")
        data = json.loads(decoded)
        return data
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return {}

def save_github_json(filename, data, commit_message="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"):
    json_data = json.dumps(data, indent=4, ensure_ascii=False)
    try:
        contents = repo.get_contents(filename)
        repo.update_file(contents.path, commit_message, json_data, contents.sha)
        logger.success(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
    except Exception as e:
        if "404" in str(e) or "Not Found" in str(e):
            try:
                repo.create_file(filename, commit_message, json_data)
                logger.success(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            except Exception as err:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {err}")
        elif "409" in str(e):
            try:
                contents = repo.get_contents(filename)
                repo.update_file(contents.path, commit_message, json_data, contents.sha)
                logger.success(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞")
            except Exception as err:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {filename}: {err}")
        else:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")

async def async_load_json(filename):
    return await asyncio.to_thread(load_github_json, filename)

async def async_save_json(filename, data, commit_message="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"):
    await asyncio.to_thread(save_github_json, filename, data, commit_message)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
async def load_data():
    global stats, active_duels
    new_stats = await async_load_json("duel_stats.json")
    stats.clear()
    stats.update(new_stats)

    new_active = await async_load_json("active_duels.json")
    active_duels.clear()
    active_duels.update(new_active)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
async def save_stats():
    global stats
    try:
        await async_save_json("duel_stats.json", stats, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É—ç–ª–µ–π")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def save_active_duels():
    global active_duels
    try:
        await async_save_json("active_duels.json", active_duels, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π: {e}")

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –¥—É—ç–ª–∏ ---
def update_stats(winner_id, loser_id):
    global stats
    winner_id = str(winner_id)
    loser_id = str(loser_id)

    if winner_id not in stats:
        stats[winner_id] = {"wins": 0, "losses": 0}
    if loser_id not in stats:
        stats[loser_id] = {"wins": 0, "losses": 0}

    stats[winner_id]["wins"] += 1
    stats[loser_id]["losses"] += 1

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    asyncio.create_task(save_stats())
    logger.success(f"üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å {winner_id}, –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π {loser_id}")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–≥–æ–≤ ---
async def get_stats():
    global stats
    return stats

async def get_active_duels():
    global active_duels
    return active_duels
