import asyncio
import logging
from datetime import datetime
from supabase import create_client, Client
from config import load_config
import re

logger = logging.getLogger("supabase_data")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase ---
config = load_config()
SUPABASE_URL = config["SUPABASE_URL"]
SUPABASE_KEY = config["SUPABASE_KEY"]

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
stats = {}          # –∫–ª—é—á–∏ ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤)
active_duels = {}   # –∫–ª—é—á–∏ ‚Äî "player1ID-player2ID"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def key_from_name(name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á –¥–ª—è stats –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"""
    return re.sub(r"\[.*?\]\s*", "", name).lower()

async def get_username_by_id(bot, user_id: int) -> str:
    try:
        user = await bot.fetch_user(user_id)
        return str(user)  # username#discriminator
    except Exception:
        return str(user_id)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase ---
async def load_data():
    global stats, active_duels
    try:
        # --- –ê–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏ ---
        resp_duels = supabase.table("active_duels").select("*").execute()
        for duel in resp_duels.data:
            player1_name = duel.get("–ò–≥—Ä–æ–∫ 1")
            player2_name = duel.get("–ò–≥—Ä–æ–∫ 2")
            player1_id = duel.get("–ò–≥—Ä–æ–∫ 1 ID")
            player2_id = duel.get("–ò–≥—Ä–æ–∫ 2 ID")

            duel_id = f"{player1_id or player1_name}-{player2_id or player2_name}"

            active_duels[duel_id] = {
                # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
                "player1": player1_name,
                "player2": player2_name,
                "challenger_id": int(player1_id) if player1_id else None,
                "opponent_id": int(player2_id) if player2_id else None,
                "game": duel.get("–ò–≥—Ä–∞"),
                "time": duel.get("–í—Ä–µ–º—è"),
                "status": duel.get("–°—Ç–∞—Ç—É—Å"),
                "start_time": duel.get("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞")
            }

        # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
        resp_stats = supabase.table("duel_stats").select("*").execute()
        for row in resp_stats.data:
            user_name = row["–ò–≥—Ä–æ–∫"]
            user_key = key_from_name(user_name)
            stats[user_key] = {
                "display_name": user_name,
                "wins": int(row["–ü–æ–±–µ–¥"]),
                "losses": int(row["–ü–æ—Ä–∞–∂–µ–Ω–∏–π"]),
                "total": int(row["–í—Å–µ–≥–æ"])
            }

        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ Supabase –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase: {e}")

async def save_duel_to_db(duel, bot):
    player1_name = duel.get("player1") or str(duel.get("challenger_id"))
    player2_name = duel.get("player2") or str(duel.get("opponent_id"))

    if not player1_name or not player2_name:
        logger.error(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—É—ç–ª–∏: {duel}")
        return

    status = duel.get("status", "active")
    start_time_raw = duel.get("start_time")
    try:
        start_time = datetime.fromisoformat(start_time_raw).strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        start_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

    data_to_save = {
        "–ò–≥—Ä–æ–∫ 1": player1_name,
        "–ò–≥—Ä–æ–∫ 2": player2_name,
        "–ò–≥—Ä–∞": duel.get("game", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
        "–í—Ä–µ–º—è": duel.get("time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
        "–°—Ç–∞—Ç—É—Å": status,
        "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞": start_time
    }

    try:
        supabase.table("active_duels").upsert(
            data_to_save,
            on_conflict=["–ò–≥—Ä–æ–∫ 1", "–ò–≥—Ä–æ–∫ 2"]
        ).execute()
        logger.info(f"üíæ –î—É—ç–ª—å {player1_name} vs {player2_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥—É—ç–ª–∏ –≤ Supabase: {e}")

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –¥—É—ç–ª–∏ ---
def update_stats(winner_name, loser_name):
    global stats
    winner_key = key_from_name(winner_name)
    loser_key = key_from_name(loser_name)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if winner_key not in stats:
        stats[winner_key] = {"display_name": winner_name, "wins": 0, "losses": 0, "total": 0}
    if loser_key not in stats:
        stats[loser_key] = {"display_name": loser_name, "wins": 0, "losses": 0, "total": 0}

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
    stats[winner_key]["wins"] = int(stats[winner_key]["wins"]) + 1
    stats[loser_key]["losses"] = int(stats[loser_key]["losses"]) + 1
    stats[winner_key]["total"] = stats[winner_key]["wins"] + stats[winner_key]["losses"]
    stats[loser_key]["total"] = stats[loser_key]["wins"] + stats[loser_key]["losses"]

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase
    asyncio.create_task(save_stats_to_db(winner_key, loser_key))

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
async def save_stats_to_db(winner_key, loser_key):
    winner = stats[winner_key]
    loser = stats[loser_key]

    try:
        supabase.table("duel_stats").upsert({
            "–ò–≥—Ä–æ–∫": winner["display_name"],
            "–ü–æ–±–µ–¥": int(winner["wins"]),
            "–ü–æ—Ä–∞–∂–µ–Ω–∏–π": int(winner["losses"]),
            "–í—Å–µ–≥–æ": int(winner["total"])
        }, on_conflict=["–ò–≥—Ä–æ–∫"]).execute()

        supabase.table("duel_stats").upsert({
            "–ò–≥—Ä–æ–∫": loser["display_name"],
            "–ü–æ–±–µ–¥": int(loser["wins"]),
            "–ü–æ—Ä–∞–∂–µ–Ω–∏–π": int(loser["losses"]),
            "–í—Å–µ–≥–æ": int(loser["total"])
        }, on_conflict=["–ò–≥—Ä–æ–∫"]).execute()

        logger.info(f"üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ {winner['display_name']} –∏ {loser['display_name']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Supabase: {e}")

# --- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Ñ—É–Ω–∫—Ü–∏—è save_active_duels ---
async def save_active_duels(bot):
    """
    –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –º–æ–¥—É–ª–µ–π.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Supabase.
    """
    from .data import active_duels, save_duel_to_db

    for duel in list(active_duels.values()):
        try:
            await save_duel_to_db(duel, bot)
        except Exception as e:
            print(f"[save_active_duels] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥—É—ç–ª–∏ {duel.get('id', 'unknown')}: {e}")

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
async def get_stats():
    return stats

async def get_active_duels():
    return active_duels
